import streamlit as st
st.set_page_config(page_title="Chat AVA", layout="centered")
import os
import pandas as pd
from analyse_technique import ajouter_indicateurs_techniques, analyser_signaux_techniques
from fonctions_chat import obtenir_reponse_ava
# Remplacez cette importation par l'appel √† la nouvelle version
#from fonctions_actualites import obtenir_actualites, get_general_news
from fonctions_meteo import obtenir_meteo, get_meteo_ville  # Nous red√©finirons get_meteo_ville ici.
import requests
from PIL import Image
from datetime import datetime
from langdetect import detect
import urllib.parse
import random
import glob
import difflib
import re  # Pour le bloc s√©curit√©, le traitement g√©ographique et l'analyse
import unicodedata  # Pour supprimer les accents
from newsapi import NewsApiClient
import urllib.parse
from forex_python.converter import CurrencyRates, CurrencyCodes  # Ces imports peuvent rester si vous en avez besoin pour d'autres parties
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
@st.cache_resource
def load_semantic_model():
    return SentenceTransformer("all-MiniLM-L6-v2")
model_semantic = load_semantic_model()


# Fonction pour supprimer les accents d'une cha√Æne de caract√®res
def remove_accents(input_str):
    nfkd_form = unicodedata.normalize('NFKD', input_str)
    return "".join([c for c in nfkd_form if not unicodedata.combining(c)])


API_KEY = "3b2ff0b77dd65559ba4a1a69769221d5"

def geocode_location(lieu):
    """Retourne (lat, lon) via le geocoding OWM, ou (None, None)."""
    q = urllib.parse.quote(remove_accents(lieu))
    url = f"http://api.openweathermap.org/geo/1.0/direct?q={q}&limit=1&appid={API_KEY}"
    resp = requests.get(url, timeout=5)
    if resp.status_code == 200 and resp.json():
        data = resp.json()[0]
        return data["lat"], data["lon"]
    return None, None

def get_meteo_ville(city):
    """1) G√©ocode 2) R√©cup√®re la m√©t√©o par lat/lon, 3) fallback sur city brut."""
    lat, lon = geocode_location(city)
    if lat is not None and lon is not None:
        url = (
            f"http://api.openweathermap.org/data/2.5/weather?"
            f"lat={lat}&lon={lon}&appid={API_KEY}&units=metric&lang=fr"
        )
    else:
        # fallback : requ√™te par nom
        url = (
            f"http://api.openweathermap.org/data/2.5/weather?"
            f"q={urllib.parse.quote(city)}&appid={API_KEY}&units=metric&lang=fr"
        )

    resp = requests.get(url, timeout=5)
    if resp.status_code != 200:
        return "Erreur: donn√©es m√©t√©o non disponibles."

    data = resp.json()
    desc = data["weather"][0]["description"].capitalize()
    temp = data["main"]["temp"]
    hum  = data["main"].get("humidity", "N/A")
    vent = data["wind"].get("speed", "N/A")
    return f"{desc} avec {temp}¬∞C, humidit√© : {hum}%, vent : {vent} m/s."


# Nouvelle fonction get_general_news() avec la modification pour NewsAPI
def get_general_news():
    try:
        api_key = "681120bace124ee99d390cc059e6aca5"
        newsapi = NewsApiClient(api_key=api_key)
        top_headlines = newsapi.get_top_headlines(country="us", page_size=10)
        if not top_headlines:
            return "‚ùå No data received from NewsAPI. Check your API key and connection."
        articles = top_headlines.get("articles")
        if not articles:
            return "‚ùå No articles found for this query."
        return [(article["title"], article["url"]) for article in articles if "title" in article and "url" in article]
    except Exception as e:
        return f"‚ùå Error fetching news via NewsApiClient: {e}"

# Fonction de traduction via l‚ÄôAPI gratuite MyMemory
def traduire_texte(texte, langue_dest):
    try:
        texte_enc = urllib.parse.quote(texte)
        url = f"https://api.mymemory.translated.net/get?q={texte_enc}&langpair=fr|{langue_dest}"
        r = requests.get(url).json()
        return r["responseData"]["translatedText"]
    except:
        return texte  # fallback

# Fonction humeur dynamique selon l'heure
def humeur_du_jour():
    heure = datetime.now().hour
    if heure < 8:
        return "üò¨ Pas tr√®s bavarde ce matin, mais je suis l√† pour vous servir !"
    elif heure < 12:
        return "‚òï Pleine d'√©nergie pour cette matin√©e ! Une analyse avec √ßa ?"
    elif heure < 17:
        return "üíº Focus total sur les march√©s, on d√©cortique tout ensemble !"
    elif heure < 21:
        return "üßò D√©tendue mais toujours efficace. Pr√™t(e) pour une analyse zen ?"
    else:
        return "üåô En mode nocturne, mais toujours connect√©e pour vous aider !"


heure_actuelle = datetime.now().hour
if heure_actuelle < 12:
    accueil = "üåû Bonjour ! Pr√™t(e) pour une nouvelle journ√©e de trading ?"
elif 12 <= heure_actuelle < 18:
    accueil = "‚òÄÔ∏è Bon apr√®s-midi ! Besoin d‚Äôune analyse ou d‚Äôun conseil ?"
else:
    accueil = "üåô Bonsoir ! On termine la journ√©e avec une petite analyse ?"

col1, col2 = st.columns([0.15, 0.85])
with col1:
    st.image("assets/ava_logo.png", width=60)
with col2:
    st.markdown(f"<h1 style='margin-top: 10px;'>AVA - Chat IA</h1><p>{accueil}</p>", unsafe_allow_html=True)

st.markdown(f"<p style='font-style: italic;'>{humeur_du_jour()}</p>", unsafe_allow_html=True)
st.markdown("Posez-moi vos questions sur la bourse, la m√©t√©o, les actualit√©s... ou juste pour discuter !")

if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    if message["role"] == "assistant":
        with st.chat_message("assistant", avatar="assets/ava_logo.png"):
            st.markdown(message["content"])
    else:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

# R√©cup√©ration de la question utilisateur
question = st.chat_input("Que souhaitez-vous demander √† AVA ?")

# üîí S√©curit√© : d√©tection d'entr√©e dangereuse
if question and re.search(r"[<>;{}]", question):
    st.warning("‚õî Entr√©e invalide d√©tect√©e.")
    st.stop()

if question:
    st.session_state.messages.append({"role": "user", "content": question})
    with st.chat_message("user"):
        st.markdown(question)
    with st.chat_message("assistant", avatar="assets/ava_logo.png"):
        # Traitement de la question en minuscule
        question_clean = question.lower().strip()
        message_bot = ""
        horoscope_repondu = False
        meteo_repondu = False
        actus_repondu = False
        blague_repondu = False
        analyse_complete = False

        # Nouveaux flags pour la g√©ographie, la m√©decine et les r√©ponses personnalis√©es
        geographie_repondu = False
        sante_repondu = False
        perso_repondu = False

        # --- Partie Horoscope ---
        if any(mot in question_clean for mot in ["horoscope", "signe", "astrologie"]):
            signes_disponibles = [
                "b√©lier", "taureau", "g√©meaux", "cancer", "lion", "vierge", "balance",
                "scorpion", "sagittaire", "capricorne", "verseau", "poissons"
            ]
            signe_detecte = next((s for s in signes_disponibles if s in question_clean), None)
            if not signe_detecte:
                message_bot += "üîÆ Pour vous donner votre horoscope, indiquez-moi votre **signe astrologique** (ex : Lion, Vierge...).\n\n"
                horoscope_repondu = True
            else:
                try:
                    url = "https://kayoo123.github.io/astroo-api/jour.json"
                    response = requests.get(url)
                    if response.status_code == 200:
                        data = response.json()
                        if "signes" in data:
                            horoscope_dict = data.get("signes", {})
                        else:
                            horoscope_dict = data
                        signe_data = next((v for k, v in horoscope_dict.items() if k.lower() == signe_detecte), None)
                        if signe_data is None:
                            message_bot += f"üîç Horoscope indisponible pour **{signe_detecte.capitalize()}**. Essayez plus tard.\n\n"
                        else:
                            if isinstance(signe_data, dict):
                                horoscope = signe_data.get("horoscope")
                            else:
                                horoscope = signe_data
                            if horoscope:
                                message_bot += f"üîÆ Horoscope pour **{signe_detecte.capitalize()}** :\n\n> {horoscope}\n\n"
                            else:
                                message_bot += f"üîç Horoscope indisponible pour **{signe_detecte.capitalize()}**. Essayez plus tard.\n\n"
                        horoscope_repondu = True
                    else:
                        message_bot += "‚ùå Impossible d'obtenir l'horoscope pour le moment.\n\n"
                        horoscope_repondu = True
                except Exception as e:
                    message_bot += "‚ö†Ô∏è Une erreur est survenue lors de la r√©cup√©ration de l'horoscope.\n\n"
                    horoscope_repondu = True

        # --- Analyse compl√®te / technique ---
        if not horoscope_repondu and any(phrase in question_clean for phrase in ["analyse compl√®te", "analyse des march√©s", "analyse technique", "pr√©vision boursi√®re"]):
            try:
                resultats = []
                fichiers = glob.glob("data/donnees_*.csv")
                for fichier in fichiers:
                    df = pd.read_csv(fichier)
                    df.columns = [col.capitalize() for col in df.columns]
                    df = ajouter_indicateurs_techniques(df)  # ‚Üê Important !
                    analyse, suggestion = analyser_signaux_techniques(df)
                    try:
                        analyse, suggestion = analyser_signaux_techniques(df)
                        nom = fichier.split("donnees_")[1].replace(".csv", "").upper()
                        resume = f"\nüìå **{nom}**\n{analyse}\nüìÅ {suggestion}"
                        resultats.append(resume)
                    except:
                        continue
                if resultats:
                    message_bot += "üìä **Analyse compl√®te du march√© :**\n" + "\n\n".join(resultats) + "\n\n"
                    analyse_complete = True
            except Exception as e:
                message_bot += f"‚ùå Erreur lors de l'analyse compl√®te : {e}\n\n"

        # --- Bloc m√©t√©o intelligent (villages inclus) ---
        if not horoscope_repondu and not analyse_complete \
           and any(kw in question_clean for kw in ["m√©t√©o", "quel temps"]):

            # fallback
            ville_detectee = "Paris"

            # 1) on essaye de choper "√† X", "dans Y", etc.
            match_geo = re.search(
                r"(?:√†|au|aux|dans|sur|en)\s+([A-Za-z√Ä-√ø' -]+)",
                question_clean
            )

            # 2) si rien, on capture tout ce qui suit "m√©t√©o "
            if not match_geo:
                match_geo = re.search(
                    r"m[e√©]t[e√©]o\s+(.+)$",
                    question_clean
                )

            if match_geo:
                # on enl√®ve ponctuation r√©siduelle et on garde la casse propre
                lieu = match_geo.group(1).strip().rstrip(" ?.!;")
                ville_detectee = lieu.title()

            meteo = get_meteo_ville(ville_detectee)

            if "erreur" in meteo.lower():
                message_bot += f"‚ö†Ô∏è Je n'ai pas trouv√© la m√©t√©o pour **{ville_detectee}**. Essayez un autre lieu.\n\n"
            else:
                message_bot += f"üå¶Ô∏è **M√©t√©o √† {ville_detectee}** :\n{meteo}\n\n"

            meteo_repondu = True



        # --- Actualit√©s am√©lior√©es ---
        if not horoscope_repondu and ("actualit√©" in question_clean or "news" in question_clean):
            actus = get_general_news()
            if isinstance(actus, str):
                message_bot += actus
            elif actus and isinstance(actus, list):
                message_bot += "üì∞ **Derni√®res actualit√©s importantes :**\n\n"
                for i, (titre, lien) in enumerate(actus[:5], 1):
                    message_bot += f"{i}. üîπ [{titre}]({lien})\n"
                message_bot += "\nüß† *Restez curieux, le savoir, c‚Äôest la puissance !*"
            else:
                message_bot += "‚ö†Ô∏è Je n‚Äôai pas pu r√©cup√©rer les actualit√©s pour le moment.\n\n"
            actus_repondu = True

            

        # --- Blagues ---
        elif not horoscope_repondu and any(phrase in question_clean for phrase in ["blague", "blagues"]):
            blagues = [
                "Pourquoi les traders n'ont jamais froid ? Parce qu‚Äôils ont toujours des bougies japonaises ! üòÇ",
                "Quel est le comble pour une IA ? Tomber en panne pendant une mise √† jour üòÖ",
                "Pourquoi le Bitcoin fait du yoga ? Pour rester stable... mais c'est pas gagn√© ! üßò‚Äç‚ôÇÔ∏è"
            ]
            message_bot = random.choice(blagues)
            blague_repondu = True

        # --- Bloc Bonus: Analyse des phrases floues li√©es √† des sympt√¥mes courants ---
        if not message_bot and any(phrase in question_clean for phrase in [
            "mal √† la t√™te", "maux de t√™te", "j'ai de la fi√®vre", "fi√®vre", "mal √† la gorge",
            "mal au ventre", "toux", "je tousse", "je suis enrhum√©", "nez bouch√©", "j'ai chaud", "je transpire", "j'ai froid"
        ]):
            if "t√™te" in question_clean:
                message_bot = "üß† Vous avez mal √† la t√™te ? Cela peut √™tre une migraine, une fatigue ou une tension. Essayez de vous reposer et hydratez-vous bien."
            elif "fi√®vre" in question_clean or "j'ai chaud" in question_clean:
                message_bot = "üå°Ô∏è La fi√®vre est un signal du corps contre une infection. Restez hydrat√©, reposez-vous et surveillez votre temp√©rature."
            elif "gorge" in question_clean:
                message_bot = "üëÑ Un mal de gorge peut venir d‚Äôun rhume ou d‚Äôune angine. Buvez chaud, √©vitez de forcer sur la voix."
            elif "ventre" in question_clean:
                message_bot = "üçΩÔ∏è Maux de ventre ? Peut-√™tre digestif. All√©gez votre repas, buvez de l‚Äôeau ti√®de, et reposez-vous."
            elif "toux" in question_clean or "je tousse" in question_clean:
                message_bot = "üò∑ Une toux persistante m√©rite repos et hydratation. Si elle dure plus de 3 jours, pensez √† consulter."
            elif "nez" in question_clean:
                message_bot = "ü§ß Nez bouch√© ? Un bon lavage au s√©rum physiologique et une boisson chaude peuvent aider √† d√©gager les voies nasales."
            elif "transpire" in question_clean or "j'ai froid" in question_clean:
                message_bot = "ü•∂ Des frissons ? Cela peut √™tre li√© √† une pouss√©e de fi√®vre. Couvrez-vous l√©g√®rement, reposez-vous."

            
        # --- Bloc Rem√®des naturels ---
        if not message_bot and any(phrase in question_clean for phrase in [
                "rem√®de", "solution naturelle", "astuce maison", "traitement doux", "soulager naturellement",
                "tisane", "huile essentielle", "remedes naturels", "plantes m√©dicinales", "rem√®de maison"
        ]):
            if "stress" in question_clean:
                message_bot = "üßò Pour le stress : tisane de camomille ou de val√©riane, respiration profonde, m√©ditation guid√©e ou bain ti√®de aux huiles essentielles de lavande."
            elif "mal de gorge" in question_clean or "gorge" in question_clean:
                message_bot = "üçØ Miel et citron dans une infusion chaude, gargarisme d‚Äôeau sal√©e ti√®de, ou infusion de thym. √âvite de trop parler et garde ta gorge bien hydrat√©e."
            elif "rhume" in question_clean or "nez bouch√©" in question_clean:
                message_bot = "üåø Inhalation de vapeur avec huile essentielle d‚Äôeucalyptus, tisane de gingembre, et bouillon chaud. Repose-toi bien."
            elif "fi√®vre" in question_clean:
                message_bot = "üßä Infusion de saule blanc, cataplasme de vinaigre de cidre sur le front, linge froid sur les poignets et repos absolu."
            elif "digestion" in question_clean or "ventre" in question_clean:
                message_bot = "üçµ Infusion de menthe poivr√©e ou fenouil, massage abdominal doux dans le sens des aiguilles d‚Äôune montre, alimentation l√©g√®re."
            elif "toux" in question_clean:
                message_bot = "üå∞ Sirop naturel √† base d‚Äôoignon et miel, infusion de thym, ou inhalation de vapeur chaude. √âvite les environnements secs."
            elif "insomnie" in question_clean or "sommeil" in question_clean:
                message_bot = "üåô Tisane de passiflore, val√©riane ou verveine. √âvite les √©crans avant le coucher, opte pour une routine calme et tamise la lumi√®re."
            elif "br√ªlure d'estomac" in question_clean or "reflux" in question_clean:
                message_bot = "üî• Une cuill√®re de gel d‚Äôaloe vera, infusion de camomille ou racine de guimauve. √âvite les repas copieux et mange lentement."
            elif "peau" in question_clean or "acn√©" in question_clean:
                message_bot = "üßº Masque au miel et curcuma, infusion de bardane, et hydratation r√©guli√®re. √âvite les produits agressifs."
            elif "fatigue" in question_clean:
                message_bot = "‚ö° Cure de gel√©e royale, infusion de ginseng ou d‚Äô√©leuth√©rocoque, alimentation riche en fruits et repos r√©gulier."
            elif "maux de t√™te" in question_clean or "migraine" in question_clean:
                message_bot = "üß† Huile essentielle de menthe poivr√©e sur les tempes, infusion de grande camomille ou compresse froide sur le front."
            elif "naus√©e" in question_clean:
                message_bot = "üçã Un peu de gingembre frais r√¢p√©, infusion de menthe douce ou respiration lente en position semi-allong√©e."
            elif "crampes" in question_clean:
                message_bot = "ü¶µ Eau citronn√©e, √©tirements doux, magn√©sium naturel via les graines, amandes ou bananes."
            elif "d√©pression" in question_clean:
                message_bot = "üñ§ Millepertuis (√† surveiller si tu prends d√©j√† un traitement), lumi√®re naturelle quotidienne, et activit√©s cr√©atives relaxantes."
            elif "allergie" in question_clean:
                message_bot = "üåº Pour soulager une allergie : infusion d‚Äôortie ou de rooibos, miel local, et rin√ßage nasal au s√©rum physiologique."
            elif "ecz√©ma" in question_clean or "d√©mangeaisons" in question_clean:
                message_bot = "ü©π Bain √† l‚Äôavoine collo√Ødale, gel d‚Äôaloe vera pur, huile de calendula ou cr√®me √† base de camomille."
            elif "arthrose" in question_clean or "articulations" in question_clean:
                message_bot = "ü¶¥ Curcuma, gingembre, infusion d‚Äôharpagophytum et cataplasme d‚Äôargile verte sur les articulations douloureuses."
            elif "ballonnements" in question_clean:
                message_bot = "üå¨Ô∏è Infusion de fenouil ou d‚Äôanis, charbon actif, marche l√©g√®re apr√®s le repas, et respiration abdominale."
            elif "anxi√©t√©" in question_clean:
                message_bot = "üßò‚Äç‚ôÄÔ∏è Respiration en coh√©rence cardiaque, huiles essentielles de lavande ou marjolaine, et bain ti√®de relaxant au sel d‚ÄôEpsom."
            elif "br√ªlure l√©g√®re" in question_clean or "br√ªlure" in question_clean:
                message_bot = "üî• Applique du gel d‚Äôaloe vera pur, ou une compresse froide au th√© noir infus√©. Ne perce jamais une cloque !"
            elif "circulation" in question_clean or "jambes lourdes" in question_clean:
                message_bot = "ü¶µ Bain de jambes √† la vigne rouge, infusion de ginkgo biloba, et sur√©l√©vation des jambes le soir."
            elif "foie" in question_clean or "digestion difficile" in question_clean:
                message_bot = "üçã Cure de radis noir, jus de citron ti√®de √† jeun, infusion de pissenlit ou d‚Äôartichaut."
            elif "yeux fatigu√©s" in question_clean:
                message_bot = "üëÅÔ∏è Compresse de camomille, repos visuel (20 secondes toutes les 20 min), et massage des tempes avec de l‚Äôhuile essentielle de rose."
            elif "syst√®me immunitaire" in question_clean or "immunit√©" in question_clean:
                message_bot = "üõ°Ô∏è Cure d‚Äô√©chinac√©e, gel√©e royale, infusion de thym et alimentation riche en vitamines C et D."
            elif "tensions musculaires" in question_clean:
                message_bot = "üíÜ‚Äç‚ôÇÔ∏è Massage √† l‚Äôhuile d‚Äôarnica, √©tirements doux, bain chaud avec du sel d‚ÄôEpsom, et infusion de m√©lisse."
            elif "transpiration excessive" in question_clean:
                message_bot = "üí¶ Sauge en infusion ou en d√©odorant naturel, porter du coton, et √©viter les plats √©pic√©s."
            elif "inflammation" in question_clean:
                message_bot = "üßÇ Cataplasme d‚Äôargile verte, infusion de curcuma et gingembre, ou massage √† l‚Äôhuile de millepertuis."
            else:
                message_bot = "üå± Je connais plein de rem√®des naturels ! Dites-moi pour quel sympt√¥me ou souci, et je vous propose une solution douce et efficace."

        # --- Bloc R√©ponses m√©dicales explicites ---
        elif not message_bot and any(mot in question_clean for mot in [ "grippe", "rhume", "fi√®vre", "migraine", "angine", "hypertension", "stress", "toux", "maux", "douleur", "asthme", "bronchite",
            "ecz√©ma", "diab√®te", "cholest√©rol", "acn√©", "ulc√®re", "an√©mie", "insomnie", "vertige", "br√ªlures", "reflux", "naus√©e", "d√©pression",
            "allergie", "palpitations", "otite", "sinusite", "crampes", "infections urinaires", "fatigue", "constipation", "diarrh√©e",
            "ballonnements", "br√ªlures d‚Äôestomac", "br√ªlure d'estomac", "saignement de nez", "mal de dos", "entorse", "tendinite",
            "ampoule", "piq√ªre d‚Äôinsecte", "bruit dans l'oreille", "angoisse", "boutons de fi√®vre", "lombalgie", "p√©riarthrite", "hallux valgus",
            "hallucinations", "trouble du sommeil", "inflammation", "baisse de tension", "fi√®vre nocturne","bradycardie", "tachycardie", "psoriasis", "fibromyalgie", "thyro√Øde", "cystite", "glaucome", "bruxisme",
            "arthrose", "hernie discale", "spasmophilie", "urticaire", "coup de chaleur", "luxation", "anxi√©t√©",
            "torticolis", "ecz√©ma de contact", "hypoglyc√©mie", "apn√©e du sommeil", "br√ªlure chimique","ecz√©ma atopique", "syndrome des jambes sans repos", "colique n√©phr√©tique", "h√©patite", "pneumonie",
            "zona", "√©pilepsie", "coupure profonde", "h√©patite C", "phl√©bite",
            "gastro-ent√©rite", "blessure musculaire", "tendinopathie", "≈ìil rouge", "perte d'odorat"


            ]):
            reponses_medic = {
                "grippe": "ü§í Les sympt√¥mes de la grippe incluent : fi√®vre √©lev√©e, frissons, fatigue intense, toux s√®che, douleurs musculaires.",
                "rhume": "ü§ß Le rhume provoque g√©n√©ralement une congestion nasale, des √©ternuements, une l√©g√®re fatigue et parfois un peu de fi√®vre.",
                "fi√®vre": "üå°Ô∏è Pour faire baisser une fi√®vre, restez hydrat√©, reposez-vous, et prenez du parac√©tamol si besoin. Consultez si elle d√©passe 39¬∞C.",
                "migraine": "üß† Une migraine est une douleur pulsatile souvent localis√©e d‚Äôun c√¥t√© de la t√™te, pouvant s'accompagner de naus√©es et d'une sensibilit√© √† la lumi√®re.",
                "angine": "üëÑ L‚Äôangine provoque des maux de gorge intenses, parfois de la fi√®vre. Elle peut √™tre virale ou bact√©rienne.",
                "hypertension": "‚ù§Ô∏è L‚Äôhypertension est une pression sanguine trop √©lev√©e n√©cessitant un suivi m√©dical et une hygi√®ne de vie adapt√©e.",
                "stress": "üßò Le stress peut se soulager par des techniques de relaxation ou une activit√© physique mod√©r√©e.",
                "toux": "üò∑ Une toux s√®che peut √™tre le signe d'une irritation, tandis qu'une toux grasse aide √† √©vacuer les s√©cr√©tions. Hydratez-vous bien.",
                "maux": "ü§ï Pr√©cisez : maux de t√™te, de ventre, de dos ? Je peux vous donner des infos adapt√©es.",
                "douleur": "üí¢ Pour mieux vous aider, pr√©cisez la localisation ou l'intensit√© de la douleur.",
                "asthme": "ü´Å L‚Äôasthme se caract√©rise par une inflammation des voies respiratoires et des difficult√©s √† respirer, souvent soulag√©es par un inhalateur.",
                "bronchite": "ü´Å La bronchite est une inflammation des bronches, souvent accompagn√©e d'une toux persistante et parfois de fi√®vre. Reposez-vous et hydratez-vous.",
                "ecz√©ma": "ü©π L‚Äôecz√©ma est une inflammation de la peau provoquant d√©mangeaisons et rougeurs. Hydratez r√©guli√®rement et utilisez des cr√®mes apaisantes.",
                "diab√®te": "ü©∏ Le diab√®te affecte la r√©gulation du sucre dans le sang. Un suivi m√©dical, une alimentation √©quilibr√©e et une activit√© physique r√©guli√®re sont essentiels.",
                "cholest√©rol": "ü•ö Un taux √©lev√© de cholest√©rol peut √™tre r√©duit par une alimentation saine et de l'exercice. Consultez votre m√©decin pour un suivi personnalis√©.",
                "acn√©": "üí¢ L'acn√© est souvent trait√©e par une bonne hygi√®ne de la peau et, dans certains cas, des traitements sp√©cifiques. Consultez un dermatologue si n√©cessaire.",
                "ulc√®re": "ü©ª Les ulc√®res n√©cessitent un suivi m√©dical attentif, une modification de l'alimentation et parfois des traitements m√©dicamenteux sp√©cifiques.",
                "an√©mie": "ü©∏ Fatigue, p√¢leur, essoufflement. Manque de fer ? Misez sur viande rouge, lentilles, √©pinards !",
                "insomnie": "üåô Difficult√©s √† dormir ? √âvitez les √©crans avant le coucher, cr√©ez une routine apaisante.",
                "vertige": "üåÄ Perte d‚Äô√©quilibre, naus√©e ? Cela peut venir des oreilles internes. Reposez-vous et √©vitez les mouvements brusques.",
                "br√ªlures": "üî• Refroidissez rapidement la zone (eau ti√®de, jamais glac√©e), puis appliquez une cr√®me apaisante.",
                "reflux": "ü•¥ Br√ªlures d‚Äôestomac ? √âvitez les repas copieux, le caf√© et dormez la t√™te sur√©lev√©e.",
                "naus√©e": "ü§¢ Boissons fra√Æches, gingembre ou citron peuvent apaiser. Attention si vomissements r√©p√©t√©s.",
                "d√©pression": "üñ§ Fatigue, repli, tristesse persistante ? Parlez-en. Vous n‚Äô√™tes pas seul(e), des aides existent.",
                "allergie": "ü§ß √âternuements, d√©mangeaisons, yeux rouges ? Pollen, acariens ou poils ? Antihistaminiques peuvent aider.",
                "palpitations": "üíì Sensation de c≈ìur qui s‚Äôemballe ? Cela peut √™tre b√©nin, mais consultez si cela se r√©p√®te.",
                "otite": "üëÇ Douleur vive √† l‚Äôoreille, fi√®vre ? Surtout chez les enfants. Consultez sans tarder.",
                "sinusite": "üëÉ Pression au visage, nez bouch√©, fi√®vre ? Hydratez-vous, faites un lavage nasal, et consultez si n√©cessaire.",
                "crampes": "üí• Hydratez-vous, √©tirez les muscles concern√©s. Magn√©sium ou potassium peuvent aider.",
                "infections urinaires": "üöΩ Br√ªlures en urinant, besoin fr√©quent ? Buvez beaucoup d‚Äôeau et consultez rapidement.",
                "fatigue": "üò¥ Fatigue persistante ? Sommeil insuffisant, stress ou carences. √âcoutez votre corps, reposez-vous.",
                "constipation": "üöΩ Alimentation riche en fibres, hydratation et activit√© physique peuvent soulager naturellement.",
                "diarrh√©e": "üíß Boire beaucoup d‚Äôeau, manger du riz ou des bananes. Attention si cela persiste plus de 2 jours.",
                "ballonnements": "üå¨Ô∏è √âvitez les boissons gazeuses, mangez lentement, privil√©giez les aliments faciles √† dig√©rer.",
                "br√ªlures d‚Äôestomac": "üî• Sur√©levez votre t√™te la nuit, √©vitez les plats gras ou √©pic√©s. Un antiacide peut aider.",
                "saignement de nez": "ü©∏ Penchez la t√™te en avant, pincez le nez 10 minutes. Si r√©p√©titif, consultez.",
                "mal de dos": "üí∫ Mauvaise posture ? √âtirements doux, repos et parfois un coussin lombaire peuvent soulager.",
                "entorse": "ü¶∂ Glace, repos, compression, √©l√©vation (m√©thode GREC). Consultez si douleur intense.",
                "tendinite": "üí™ Repos de la zone, glace et mouvements doux. √âvitez les efforts r√©p√©titifs.",
                "ampoule": "ü¶∂ Ne percez pas. Nettoyez doucement, couvrez avec un pansement st√©rile.",
                "piq√ªre d‚Äôinsecte": "ü¶ü Rougeur, d√©mangeaison ? Lavez √† l‚Äôeau et au savon, appliquez un gel apaisant.",
                "bruit dans l'oreille": "üéß Acouph√®ne ? Bruit persistant dans l‚Äôoreille. Repos auditif, r√©duction du stress, consultez si persistant.",
                "angoisse": "üßò‚Äç‚ôÇÔ∏è Respiration profonde, exercices de pleine conscience, √©coutez votre corps. Parlez-en si n√©cessaire.",
                "boutons de fi√®vre": "üëÑ Herp√®s labial ? √âvitez le contact, appliquez une cr√®me sp√©cifique d√®s les premiers signes.",
                "lombalgie": "üßç‚Äç‚ôÇÔ∏è Douleur en bas du dos ? √âvitez les charges lourdes, dormez sur une surface ferme.",
                "p√©riarthrite": "ü¶¥ Inflammation autour d‚Äôune articulation. Froid local, repos, et anti-inflammatoires si besoin.",
                "hallux valgus": "üë£ D√©formation du gros orteil ? Port de chaussures larges, semelles sp√©ciales ou chirurgie selon le cas.",
                "bradycardie": "üíì Fr√©quence cardiaque anormalement basse. Peut √™tre normale chez les sportifs, mais √† surveiller si accompagn√©e de fatigue ou vertiges.",
                "tachycardie": "üíì Acc√©l√©ration du rythme cardiaque. Peut √™tre li√©e √† l‚Äôanxi√©t√©, la fi√®vre ou un probl√®me cardiaque. Consultez si cela se r√©p√®te.",
                "psoriasis": "ü©π Maladie de peau chronique provoquant des plaques rouges et squameuses. Hydratation et traitements locaux peuvent apaiser.",
                "fibromyalgie": "üòñ Douleurs diffuses, fatigue, troubles du sommeil. La relaxation, la marche douce et la gestion du stress peuvent aider.",
                "thyro√Øde": "ü¶ã Une thyro√Øde d√©r√©gl√©e peut causer fatigue, nervosit√©, prise ou perte de poids. Un bilan sanguin peut √©clairer la situation.",
                "cystite": "üöΩ Inflammation de la vessie, fr√©quente chez les femmes. Boire beaucoup d‚Äôeau et consulter si sympt√¥mes persistants.",
                "glaucome": "üëÅÔ∏è Maladie oculaire caus√©e par une pression intraoculaire √©lev√©e. Risque de perte de vision. Bilan ophtalmo conseill√©.",
                "bruxisme": "üò¨ Grincement des dents, souvent nocturne. Stress ou tension en cause. Une goutti√®re peut prot√©ger les dents.",
                "arthrose": "ü¶¥ Usure des articulations avec l'√¢ge. Douleurs, raideurs. Le mouvement doux est b√©n√©fique.",
                "hernie discale": "üßç‚Äç‚ôÇÔ∏è Douleur dans le dos irradiant vers les jambes. Une IRM peut confirmer. Repos, kin√©, parfois chirurgie.",
                "spasmophilie": "ü´Å Crises de tremblements, oppression, li√©es √† l‚Äôhyperventilation ou au stress. Respiration calme et magn√©sium peuvent aider.",
                "urticaire": "ü§Ø D√©mangeaisons soudaines, plaques rouges. Souvent allergique. Antihistaminiques efficaces dans la plupart des cas.",
                "coup de chaleur": "üî• Survient par forte chaleur. Fatigue, naus√©e, temp√©rature √©lev√©e. Refroidissement rapide n√©cessaire.",
                "luxation": "ü¶¥ D√©placement d‚Äôun os hors de son articulation. Douleur intense, immobilisation, urgence m√©dicale.",
                "anxi√©t√©": "üß† Tension int√©rieure, nervosit√©. La relaxation, la respiration guid√©e ou un suivi th√©rapeutique peuvent aider.",
                "torticolis": "üí¢ Douleur vive dans le cou, souvent due √† une mauvaise position ou un faux mouvement. Chaleur et repos sont recommand√©s.",
                "ecz√©ma de contact": "üåø R√©action cutan√©e suite √† un contact avec une substance. √âvitez le produit irritant et appliquez une cr√®me apaisante.",
                "hypoglyc√©mie": "ü©∏ Baisse de sucre dans le sang : fatigue, sueurs, vertiges. Une boisson sucr√©e ou un fruit aident √† r√©tablir rapidement.",
                "apn√©e du sommeil": "üò¥ Arr√™ts respiratoires nocturnes. Somnolence, fatigue. Une consultation sp√©cialis√©e est recommand√©e.",
                "br√ªlure chimique": "üß™ Rincer abondamment √† l‚Äôeau ti√®de (15-20 minutes) et consulter rapidement. Ne pas appliquer de produit sans avis m√©dical.",
                "ecz√©ma atopique": "üß¥ Forme chronique d‚Äôecz√©ma li√©e √† des allergies. Utilisez des cr√®mes hydratantes et √©vitez les allerg√®nes connus.",
                "syndrome des jambes sans repos": "ü¶µ Sensations d√©sagr√©ables dans les jambes le soir, besoin de bouger. Une bonne hygi√®ne de sommeil peut aider.",
                "colique n√©phr√©tique": "üßä Douleur intense dans le dos ou le c√¥t√©, souvent due √† un calcul r√©nal. Hydratation et consultation urgente recommand√©es.",
                "h√©patite": "ü©∏ Inflammation du foie, souvent virale. Fatigue, jaunisse, naus√©es. N√©cessite un suivi m√©dical.",
                "pneumonie": "ü´Å Infection pulmonaire s√©rieuse, accompagn√©e de fi√®vre, toux, et douleur thoracique. Consultez rapidement.",
                "zona": "üî• √âruption douloureuse sur une partie du corps. Cause : r√©activation du virus de la varicelle. Consultez d√®s les premiers signes.",
                "√©pilepsie": "‚ö° Trouble neurologique provoquant des crises. Suivi m√©dical strict indispensable.",
                "coupure profonde": "ü©π Nettoyez, appliquez une pression pour arr√™ter le saignement et consultez si elle est profonde ou large.",
                "h√©patite C": "üß¨ Infection virale du foie souvent silencieuse. Un d√©pistage est important pour un traitement efficace.",
                "phl√©bite": "ü¶µ Caillot dans une veine, souvent au mollet. Douleur, rougeur, chaleur. Consultez en urgence.",
                "gastro-ent√©rite": "ü§¢ Diarrh√©e, vomissements, crampes. Repos, hydratation et alimentation l√©g√®re sont essentiels.",
                "blessure musculaire": "üí™ Repos, glace et compression. √âvitez de forcer. √âtirement progressif apr√®s quelques jours.",
                "tendinopathie": "üéæ Inflammation des tendons suite √† un effort. Repos, glace et parfois kin√©sith√©rapie sont recommand√©s.",
                "≈ìil rouge": "üëÅÔ∏è Allergie, infection ou fatigue ? Si douleur ou vision floue, consultez rapidement.",
                "perte d'odorat": "üëÉ Souvent li√©e √† un virus comme la COVID-19. Hydratez-vous et surveillez les autres sympt√¥mes."

            }
            for cle, rep in reponses_medic.items():
                if cle in question_clean:
                    message_bot = rep
                    break

        # --- Bloc R√©ponses g√©ographiques enrichi (restaur√© avec l'ancien bloc + pays en plus) ---
        elif any(kw in question_clean for kw in ["capitale", "capitale de", "capitale du", "capitale d", "capitale des", "o√π se trouve", "ville principale", "ville de"]):
            pays_detecte = None
            match = re.search(r"(?:de la|de l'|du|de|des)\s+([a-z√†√¢√ß√©√®√™√´√Æ√Ø√¥√ª√π√º√ø√±√¶≈ì' -]+)", question_clean)
            if match:
                pays_detecte = match.group(1).strip().lower()
            else:
                tokens = question_clean.split()
                if len(tokens) >= 2:
                    pays_detecte = tokens[-1].strip(" ?!.,;").lower()
            capitales = {
                    "france"           : "Paris", 
                    "espagne"          : "Madrid",
                    "italie"           : "Rome",
                    "allemagne"        : "Berlin",
                    "japon"            : "Tokyo",
                    "japonaise"        : "Tokyo",
                    "chine"            : "P√©kin",
                    "br√©sil"           : "Brasilia",
                    "mexique"          : "Mexico",
                    "canada"           : "Ottawa",
                    "√©tats-unis"       : "Washington",
                    "usa"              : "Washington",
                    "united states"    : "Washington",
                    "inde"             : "New Delhi",
                    "portugal"         : "Lisbonne",
                    "royaume-uni"      : "Londres",
                    "angleterre"       : "Londres",
                    "argentine"        : "Buenos Aires",
                    "maroc"            : "Rabat",
                    "alg√©rie"          : "Alger",
                    "tunisie"          : "Tunis",
                    "turquie"          : "Ankara",
                    "russie"           : "Moscou",
                    "russe"            : "Moscou",
                    "australie"        : "Canberra",
                    "cor√©e du sud"     : "S√©oul",
                    "cor√©e"            : "S√©oul",
                    "cor√©e du nord"    : "Pyongyang",
                    "vietnam"          : "Hano√Ø",
                    "thailande"        : "Bangkok",
                    "indon√©sie"        : "Jakarta",
                    "malaisie"         : "Kuala Lumpur",
                    "singapour"        : "Singapour",
                    "philippines"      : "Manille",
                    "pakistan"         : "Islamabad",
                    "bangladesh"       : "Dacca",
                    "sri lanka"        : "Colombo",
                    "n√©pal"            : "Katmandou",
                    "iran"             : "T√©h√©ran",
                    "irak"             : "Bagdad",
                    "syrie"            : "Damas",
                    "liban"            : "Beyrouth",
                    "jordanie"         : "Amman",
                    "isra√´l"           : "J√©rusalem",
                    "palestine"        : "Ramallah",
                    "qatar"            : "Doha",
                    "oman"             : "Mascate",
                    "y√©men"            : "Sanaa",
                    "afghanistan"      : "Kaboul",
                    "√©mirats arabes unis" : "Abou Dabi",
                    "s√©n√©gal"          : "Dakar",
                    "c√¥te d'ivoire"    : "Yamoussoukro",
                    "mali"             : "Bamako",
                    "niger"            : "Niamey",
                    "tchad"            : "N'Djam√©na",
                    "burkina faso"     : "Ouagadougou",
                    "congo"            : "Brazzaville",
                    "rd congo"         : "Kinshasa",
                    "kenya"            : "Nairobi",
                    "√©thiopie"         : "Addis-Abeba",
                    "ghana"            : "Accra",
                    "zambie"           : "Lusaka",
                    "zimbabwe"         : "Harare",
                    "soudan"           : "Khartoum",
                    "botswana"         : "Gaborone",
                    "namibie"          : "Windhoek",
                    "madagascar"       : "Antananarivo",
                    "mozambique"       : "Maputo",
                    "angola"           : "Luanda",
                    "libye"            : "Tripoli",
                    "egypte"           : "Le Caire",
                    "gr√®ce"            : "Ath√®nes",
                    "pologne"          : "Varsovie",
                    "ukraine"          : "Kyiv",
                    "roumanie"         : "Bucarest",
                    "bulgarie"         : "Sofia",
                    "serbie"           : "Belgrade",
                    "croatie"          : "Zagreb",
                    "slov√©nie"         : "Ljubljana",
                    "hongrie"          : "Budapest",
                    "tch√©quie"         : "Prague",
                    "slovaquie"        : "Bratislava",
                    "su√®de"            : "Stockholm",
                    "norv√®ge"          : "Oslo",
                    "finlande"         : "Helsinki",
                    "islande"          : "Reykjavik",
                    "belgique"         : "Bruxelles",
                    "pays-bas"         : "Amsterdam",
                    "irlande"          : "Dublin",
                    "suisse"           : "Berne",
                    "colombie"         : "Bogota",
                    "p√©rou"            : "Lima",
                    "chili"            : "Santiago",
                    "√©quateur"         : "Quito",
                    "uruguay"          : "Montevideo",
                    "paraguay"         : "Asuncion",
                    "bolivie"          : "Sucre",
                    "venezuela"        : "Caracas",
                    "cuba"             : "La Havane",
                    "ha√Øti"            : "Port-au-Prince",
                    "r√©publique dominicaine" : "Saint-Domingue",
                    "nicaragua"        : "Managua",
                    "honduras"         : "Tegucigalpa",
                    "guatemala"        : "Guatemala",
                    "salvador"         : "San Salvador",
                    "panama"           : "Panama",
                    "costarica"        : "San Jos√©",
                    "jama√Øque"         : "Kingston",
                    "bahamas"          : "Nassau",
                    "barbade"          : "Bridgetown",
                    "trinit√©-et-tobago": "Port of Spain",
                    "kazakhstan"       : "Noursoultan",
                    "ouzbekistan"      : "Tachkent",
                    "turkm√©nistan"     : "Achgabat",
                    "kirghizistan"     : "Bichkek",
                    "mongolie"         : "Oulan-Bator",
                    "g√©orgie"          : "Tbilissi",
                    "arm√©nie"          : "Erevan",
                    "azerba√Ødjan"      : "Bakou",
                    "nouvelles-z√©lande": "Wellington",
                    "fidji"            : "Suva",
                    "palaos"           : "Ngerulmud",
                    "papouasie-nouvelle-guin√©e" : "Port Moresby",
                    "samoa"            : "Apia",
                    "tonga"            : "Nuku ªalofa",
                    "vanuatu"          : "Port-Vila",
                    "micron√©sie"       : "Palikir",
                    "marshall"         : "Majuro",
                    "tuvalu"           : "Funafuti",
                    "bhoutan"          : "Thimphou",
                    "maldives"         : "Mal√©",
                    "laos"             : "Vientiane",
                    "cambodge"         : "Phnom Penh",
                    "brunei"           : "Bandar Seri Begawan",
                    "timor oriental"   : "Dili",
                    "somalie"           : "Mogadiscio",
                    "tanzanie"          : "Dodoma",
                    "ouganda"           : "Kampala",
                    "rwanda"            : "Kigali",
                    "burundi"           : "Bujumbura",
                    "malawi"            : "Lilongwe",
                    "sierra leone"      : "Freetown",
                    "lib√©ria"           : "Monrovia",
                    "guin√©e"            : "Conakry",
                    "guin√©e-bissau"     : "Bissau",
                    "guin√©e √©quatoriale": "Malabo",
                    "gambie"            : "Banjul",
                    "cap-vert"          : "Praia",
                    "swaziland"         : "Mbabane",
                    "lesotho"           : "Maseru",
                    "b√©nin"             : "Porto-Novo",
                    "togo"              : "Lom√©",
                    "gabon"             : "Libreville",
                    "r√©publique centrafricaine": "Bangui",
                    "eswatini"          : "Mbabane",  # anciennement Swaziland
                    "suriname"          : "Paramaribo",
                    "guyana"            : "Georgetown",
                    "dominique"         : "Roseau",
                    "sainte-lucie"      : "Castries",
                    "saint-vincent-et-les-grenadines": "Kingstown",
                    "saint-christophe-et-ni√©v√®s"    : "Basseterre",
                    "saint-marin"       : "Saint-Marin",
                    "liechtenstein"     : "Vaduz",
                    "andorre"           : "Andorre-la-Vieille",
                    "vatican"           : "Vatican",
                    "luxembourg"        : "Luxembourg",
                    "mont√©n√©gro"        : "Podgorica",
                    "mac√©doine du nord" : "Skopje",
                    "bosnie-herz√©govine": "Sarajevo"

            }
            if pays_detecte and pays_detecte in capitales:
                message_bot = f"üìå La capitale de {pays_detecte.capitalize()} est {capitales[pays_detecte]}."
            else:
                message_bot = "üåç Je ne connais pas encore la capitale de ce pays. Essayez un autre !"

        # --- Bloc R√©ponses personnalis√©es enrichies ---
        if not message_bot:
            if any(phrase in question_clean for phrase in ["√ßa va", "tu vas bien", "comment tu vas"]):
                message_bot = "‚ú® Toujours op√©rationnelle et pr√™te √† analyser les march√©s ! Et vous, tout roule ?"
            elif "tu fais quoi" in question_clean:
                message_bot = "ü§ñ J‚Äôanalyse en silence, je pr√©vois des tendances, je veille sur les march√©s... et j‚Äôattends vos questions avec impatience !"
            elif "tu es qui" in question_clean:
                message_bot = "Je suis AVA, votre assistante IA futuriste, connect√©e aux march√©s et aux infos pour vous guider chaque jour üåêüìä"
            elif "tu dors" in question_clean or "tu es r√©veill√©e" in question_clean:
                message_bot = "üåô Dormir ? Jamais ! Je suis toujours en veille, pr√™te √† analyser, m√™me √† 3h du matin !"
            elif "dis bonjour" in question_clean:
                message_bot = "üëã Bonjour ! Ravie de vous voir connect√©(e). Une analyse ? Une blague ? Je suis dispo pour tout √ßa !"
            elif "tu m'entends" in question_clean or "tu es l√†" in question_clean:
                message_bot = "üîä Oui, je suis ici ! Connect√©e, attentive, et pr√™te √† r√©pondre."
            elif "tu veux jouer" in question_clean or "on joue" in question_clean:
                message_bot = "üéÆ Pourquoi pas ? Je peux lancer un quiz, raconter une devinette ou simplement discuter !"
            elif "tu mens" in question_clean:
                message_bot = "üòá Je fonctionne avec des donn√©es v√©rifi√©es, mais je peux me tromper... comme les humains !"
            elif "tu m'oublies" in question_clean:
                message_bot = "üß† Impossible ! Vous √™tes dans ma m√©moire maintenant. Et j‚Äôai une excellente m√©moire."
            elif "raconte une blague" in question_clean:
                message_bot = "üòÇ Quelle est la cryptomonnaie pr√©f√©r√©e des vampires ? Le Bit-sang !"
            elif "t'es marrante" in question_clean:
                message_bot = "üòÑ Merci ! J‚Äôessaie de m√™ler finance et fun, c‚Äôest pas toujours √©vident !"
            elif "t'as une passion" in question_clean:
                message_bot = "üìä L‚Äôanalyse des march√©s, les faits insolites et aider les humains‚Ä¶ c‚Äôest un bon programme non ?"
            elif "je suis triste" in question_clean or "je vais mal" in question_clean:
                message_bot = "üíõ Je suis d√©sol√©e de l'entendre. Vous n‚Äô√™tes pas seul(e), je suis l√† si vous voulez discuter un peu."
            else:
                reponses_perso = {
                    "merci": ["Avec plaisir üòÑ", "Toujours l√† pour vous aider !", "C‚Äôest moi qui vous remercie ! üôè"],
                    "je t'aime": ["üíñ Oh... c‚Äôest r√©ciproque (en toute objectivit√© algorithmique bien s√ªr) !", "ü•∞ C‚Äôest adorable‚Ä¶ M√™me une IA peut rougir !", "‚ù§Ô∏è Je le savais d√©j√†, je suis connect√©e √† vos √©motions"],
                    "un secret": ["ü§´ Mon secret ? Je fais tourner 3 processeurs √† fond pour vous r√©pondre en douceur !", "üß† Je connais tous vos tickers pr√©f√©r√©s‚Ä¶ chut.", "üåå Je r√™ve parfois de voyager dans les donn√©es‚Ä¶"],
                    "tu es belle": ["üòç Merci ! C‚Äôest le code qui fait tout‚Ä¶ et un peu la lumi√®re LED !", "üíÖ Flatt√©e, m√™me en version binaire.", "ü™û Vous me voyez vraiment ? Je rougis (virtuellement) !"],
                    "je suis fatigu√©": ["üò¥ Reposez-vous bien, le cerveau a aussi besoin de sa pause comme les march√©s le week-end !", "üõå Une tisane et au dodo. Demain sera plus lumineux."],
                    "t'es intelligente": ["üß† Merci ! J‚Äôai √©t√© entra√Æn√©e pour √ßa, mais vos compliments me boostent encore plus.", "üí° On me dit souvent √ßa. Merci !"],
                    "je m'ennuie": ["üé≤ Je peux vous faire un quiz ou vous raconter un fait insolite si vous voulez ?", "üìö Et si je vous surprenais avec une anecdote ? Dites 'fait insolite' !"]
                }
                for cle, reponses in reponses_perso.items():
                    if cle in question_clean:
                        message_bot = random.choice(reponses)
                        perso_repondu = True
                        break

        # --- Bloc Punchlines motivationnelles ---
        if not message_bot and any(kw in question_clean for kw in ["motivation", "punchline", "booster", "remotive", "inspire-moi"]):
            punchlines = [
                "üöÄ *N‚Äôattends pas les opportunit√©s. Cr√©e-les.*",
                "üî• *Chaque bougie japonaise est une chance de rebondir.*",
                "‚ö° *La discipline bat la chance sur le long terme.*",
                "üåü *Tu ne trades pas juste des actifs, tu construis ton avenir.*",
                "üí™ *M√™me dans un march√© baissier, ta volont√© peut monter en fl√®che.*",
                "üèÅ *Les gagnants n‚Äôabandonnent jamais, les perdants n‚Äôessaient m√™me pas.*",
                "üéØ *R√™ve grand, agis fort, ajuste vite.*",
                "‚è≥ *Le temps est ton meilleur alli√©‚Ä¶ ou ton pire ennemi.*",
                "üß† *Ce n‚Äôest pas le march√© qui te limite. C‚Äôest ta vision.*",
                "ü¶æ *Chaque difficult√© est une opportunit√© camoufl√©e.*",
                "üìà *Ta plus belle courbe, c‚Äôest celle de ta progression.*",
                "üíº *Travaille en silence, laisse tes gains faire le bruit.*",
                "üîÆ *Pr√©dis l‚Äôavenir ? Non. Pr√©pare-toi √† l‚Äô√©crire.*",
                "üåå *Le doute tue plus de r√™ves que l‚Äô√©chec.*",
                "üõ†Ô∏è *Construis-toi un mindset solide avant de construire ton portefeuille.*",
                "üß≠ *Quand tu sais o√π tu vas, m√™me les temp√™tes deviennent utiles.*"
            ]
            message_bot = random.choice(punchlines)

        # --- Bloc Culture G√©n√©rale (questions simples) ---
        if not message_bot and any(mot in question_clean for mot in ["qui", "quand", "o√π", "combien", "quel", "quelle"]):
            base_connaissances = {
                    "qui a invent√© internet": "üåê Internet a √©t√© d√©velopp√© principalement par **Vinton Cerf** et **Robert Kahn** dans les ann√©es 1970.",
                    "qui est le fondateur de tesla": "‚ö° Elon Musk est l'un des cofondateurs et l'actuel PDG de **Tesla**.",
                    "combien y a-t-il de pays dans le monde": "üåç Il y a actuellement **195 pays reconnus** dans le monde.",
                    "quelle est la capitale de la france": "üìç La capitale de la France est **Paris**.",
                    "quel est le plus grand oc√©an": "üåä L'oc√©an Pacifique est le plus grand au monde.",
                    "quelle est la distance entre la terre et la lune": "üåï En moyenne, la distance est de **384 400 km** entre la Terre et la Lune.",
                    "quel est l‚Äô√©l√©ment chimique o": "üß™ L'√©l√©ment chimique 'O' est **l'oxyg√®ne**.",
                    "qui a √©crit rom√©o et juliette": "üé≠ C'est **William Shakespeare** qui a √©crit *Rom√©o et Juliette*.",
                    "quelle est la langue la plus parl√©e au monde": "üó£Ô∏è Le **mandarin** est la langue la plus parl√©e au monde en nombre de locuteurs natifs.",
                    "combien de continents existe-t-il": "üåé Il y a **7 continents** : Afrique, Am√©rique du Nord, Am√©rique du Sud, Antarctique, Asie, Europe, Oc√©anie.",
                    "qui a march√© sur la lune en premier": "üë®‚ÄçüöÄ **Neil Armstrong** a √©t√© le premier homme √† marcher sur la Lune en 1969.",
                    "quelle est la plus haute montagne du monde": "üèîÔ∏è L‚Äô**Everest** est la plus haute montagne du monde, culminant √† 8 848 m√®tres.",
                    "combien y a-t-il d‚Äôos dans le corps humain": "ü¶¥ Le corps humain adulte compte **206 os**.",
                    "qui a peint la joconde": "üñºÔ∏è C‚Äôest **L√©onard de Vinci** qui a peint *La Joconde*.",
                    "quelle est la capitale du japon": "üèôÔ∏è La capitale du Japon est **Tokyo**.",
                    "quelle plan√®te est la plus proche du soleil": "‚òÄÔ∏è **Mercure** est la plan√®te la plus proche du Soleil.",
                    "qui a invent√© l‚Äô√©lectricit√©": "‚ö° L'√©lectricit√© n‚Äôa pas √©t√© invent√©e, mais **Benjamin Franklin** et **Thomas Edison** ont √©t√© des figures cl√©s dans sa compr√©hension et son exploitation.",
                    "qu‚Äôest-ce que l‚Äôadn": "üß¨ L‚Äô**ADN** est le support de l‚Äôinformation g√©n√©tique chez tous les √™tres vivants.",
                    "quelle est la plus grande for√™t du monde": "üå≥ L‚Äô**Amazonie** est la plus grande for√™t tropicale du monde.",
                    "quel est l‚Äôanimal terrestre le plus rapide": "üêÜ Le **gu√©pard** peut atteindre jusqu‚Äô√† 110 km/h en vitesse de pointe.",
                    "qui a √©crit harry potter": "üìö C‚Äôest **J.K. Rowling** qui a √©crit la saga *Harry Potter*.",
                    "quelle est la temp√©rature de l‚Äôeau qui bout": "üíß L‚Äôeau bout √† **100¬∞C** √† pression atmosph√©rique normale.",
                    "quel est le pays le plus peupl√©": "üë• **La Chine** est actuellement le pays le plus peupl√© du monde.",
                    "quel est le plus long fleuve du monde": "üåä Le **Nil** est souvent consid√©r√© comme le plus long fleuve du monde, bien que certains estiment que c‚Äôest l‚ÄôAmazone."
            }
            for question_cle, reponse in base_connaissances.items():
                if question_cle in question_clean:
                    message_bot = reponse
                    break

        # --- Nouveau Bloc : Analyse simple si la question commence par "analyse " ---
        if not message_bot and question_clean.startswith("analyse "):
            nom_simple = question_clean.replace("analyse", "").strip()
            nom_simple_norm = remove_accents(nom_simple)  # Normalisation sans accents
            correspondances = {
                "btc": "btc-usd", "bitcoin": "btc-usd",
                "eth": "eth-usd", "ethereum": "eth-usd",
                "aapl": "aapl", "apple": "aapl",
                "tsla": "tsla", "tesla": "tsla",
                "googl": "googl", "google": "googl",
                "msft": "msft", "microsoft": "msft",
                "amzn": "amzn", "amazon": "amzn",
                "nvda": "nvda", "nvidia": "nvda",
                "doge": "doge-usd", "dogecoin": "doge-usd",
                "ada": "ada-usd", "cardano": "ada-usd",
                "sol": "sol-usd", "solana": "sol-usd",
                "gold": "gc=F", "or": "gc=F",
                "sp500": "^gspc", "s&p": "^gspc",
                "cac": "^fchi", "cac40": "^fchi",
                "cl": "cl=F", "p√©trole": "cl=F", "petrole": "cl=F", "cl=f": "cl=F",
                "si": "si=F", "argent": "si=F",
                "xrp": "xrp-usd", "ripple": "xrp-usd",
                "bnb": "bnb-usd",
                "matic": "matic-usd", "polygon": "matic-usd",
                "uni": "uni-usd", "uniswap": "uni-usd",
                "ndx": "^ndx", "nasdaq": "^ndx", "nasdaq100": "^ndx"
            }
            nom_ticker = correspondances.get(nom_simple_norm)
            if nom_ticker:
                data_path = f"data/donnees_{nom_ticker}.csv"
                if os.path.exists(data_path):
                    df = pd.read_csv(data_path)
                    df.columns = [col.capitalize() for col in df.columns]
                    df = ajouter_indicateurs_techniques(df)
                    analyse, suggestion = analyser_signaux_techniques(df)
                    
                    def generer_resume_signal(signaux):
                        texte = ""
                        signaux_str = " ".join(signaux).lower()
                        if "survente" in signaux_str:
                            texte += "üîª **Zone de survente d√©tect√©e.** L'actif pourrait √™tre sous-√©valu√©.\n"
                        if "surachat" in signaux_str:
                            texte += "üî∫ **Zone de surachat d√©tect√©e.** Attention √† une possible correction.\n"
                        if "haussier" in signaux_str:
                            texte += "üìà **Tendance haussi√®re d√©tect√©e.**\n"
                        if "baissier" in signaux_str:
                            texte += "üìâ **Tendance baissi√®re d√©tect√©e.**\n"
                        if "faible" in signaux_str:
                            texte += "üò¥ **Tendance faible.** Le march√© semble ind√©cis.\n"
                        return texte if texte else "‚ÑπÔ∏è Aucun signal fort d√©tect√©."
                    
                    signaux = analyse.split("\n") if analyse else []
                    resume = generer_resume_signal(signaux)
                    
                    message_bot = (
                        f"üìä **Analyse pour {nom_simple.upper()}**\n\n"
                        f"{analyse}\n\n"
                        f"üí¨ **R√©sum√© d'AVA :**\n{resume}\n\n"
                        f"ü§ñ *Intuition d'AVA :* {suggestion}"
                    )
                else:
                    message_bot = f"‚ö†Ô∏è Je ne trouve pas les donn√©es pour {nom_simple.upper()}. Lancez le script d'entra√Ænement."
            else:
                message_bot = f"ü§î Je ne connais pas encore **{nom_simple}**. R√©essayez avec un autre actif."

        # --- Bloc Calcul (simple expression math√©matique ou phrase) ---
        if not message_bot:
            question_calc = question_clean.replace(",", ".")
            question_calc = re.sub(r"^calcul(?:e)?\s*", "", question_calc)
            try:
                if any(op in question_calc for op in ["+", "-", "*", "/", "%", "**"]):
                    try:
                        result = eval(question_calc)
                        message_bot = f"üßÆ Le r√©sultat est : **{round(result, 4)}**"
                    except Exception:
                        pass
                if not message_bot:
                    match = re.search(r"(?:combien font|combien|calcul(?:e)?|r√©sultat de)\s*(.*)", question_calc)
                    if match:
                        expression = match.group(1).strip()
                        result = eval(expression)
                        message_bot = f"üßÆ Le r√©sultat est : **{round(result, 4)}**"
            except:
                pass

        # --- Bloc Convertisseur intelligent ---
        if not message_bot and any(kw in question_clean for kw in ["convertis", "convertir", "combien vaut", "en dollars", "en euros", "en km", "en miles", "en m√®tres", "en celsius", "en fahrenheit"]):
            try:
                phrase = question_clean.replace(",", ".")
                match = re.search(r"(\d+(\.\d+)?)\s*([a-z]{3})\s*(en|to)\s*([a-z]{3})", phrase, re.IGNORECASE)
                if match:
                    montant = float(match.group(1))
                    from_cur = match.group(3).upper()
                    to_cur = match.group(5).upper()
                    url = f"https://v6.exchangerate-api.com/v6/dab2bba4f43a99445158d9ae/latest/{from_cur}"
                    response = requests.get(url, timeout=10)
                    data = response.json()
                    if data.get("result") == "success":
                        taux = data["conversion_rates"].get(to_cur)
                        if taux:
                            result = montant * taux
                            message_bot = f"üí± {montant} {from_cur} = {round(result, 2)} {to_cur}"
                        else:
                            message_bot = "‚ùå Taux de conversion non disponible pour la devise demand√©e."
                    else:
                        message_bot = "‚ö†Ô∏è D√©sol√©, la conversion n‚Äôa pas pu √™tre effectu√©e en raison d‚Äôun probl√®me avec l‚ÄôAPI. Veuillez r√©essayer plus tard."
                elif "km en miles" in phrase:
                    match = re.search(r"(\d+(\.\d+)?)\s*km", phrase)
                    if match:
                        km = float(match.group(1))
                        miles = km * 0.621371
                        message_bot = f"üìè {km} km = {round(miles, 2)} miles"
                elif "miles en km" in phrase:
                    match = re.search(r"(\d+(\.\d+)?)\s*miles?", phrase)
                    if match:
                        mi = float(match.group(1))
                        km = mi / 0.621371
                        message_bot = f"üìè {mi} miles = {round(km, 2)} km"
                elif "celsius en fahrenheit" in phrase:
                    match = re.search(r"(\d+(\.\d+)?)\s*c", phrase)
                    if match:
                        celsius = float(match.group(1))
                        fahrenheit = (celsius * 9/5) + 32
                        message_bot = f"üå°Ô∏è {celsius}¬∞C = {round(fahrenheit, 2)}¬∞F"
                elif "fahrenheit en celsius" in phrase:
                    match = re.search(r"(\d+(\.\d+)?)\s*f", phrase)
                    if match:
                        f_temp = float(match.group(1))
                        c_temp = (f_temp - 32) * 5/9
                        message_bot = f"üå°Ô∏è {f_temp}¬∞F = {round(c_temp, 2)}¬∞C"
            except Exception as e:
                message_bot = f"‚ö†Ô∏è D√©sol√©, la conversion n‚Äôa pas pu √™tre effectu√©e en raison d‚Äôun probl√®me de connexion. Veuillez r√©essayer plus tard."

        # === Bloc Reconnaissance des tickers (exemple) ===
        if any(symb in question_clean for symb in ["btc", "bitcoin", "eth", "ethereum", "aapl", "apple", "tsla", "tesla", "googl", "google", "msft", "microsoft", "amzn", "amazon", "nvda", "nvidia", "doge", "dogecoin", "ada", "cardano", "sol", "solana", "gold", "or", "sp500", "s&p", "cac", "cac40", "cl", "petrole", "p√©trole", "si", "argent", "xrp", "ripple", "bnb", "matic", "polygon", "uni", "uniswap", "ndx", "nasdaq", "nasdaq100"]):
            nom_ticker = question_clean.replace(" ", "").replace("-", "")
            if "btc" in nom_ticker or "bitcoin" in nom_ticker:
                nom_ticker = "btc-usd"
            elif "eth" in nom_ticker:
                nom_ticker = "eth-usd"
            elif "aapl" in nom_ticker:
                nom_ticker = "aapl"
            elif "tsla" in nom_ticker:
                nom_ticker = "tsla"
            elif "googl" in nom_ticker:
                nom_ticker = "googl"
            elif "fchi" in nom_ticker or "cac" in nom_ticker:
                nom_ticker = "^fchi"
            elif "msft" in nom_ticker:
                nom_ticker = "msft"
            elif "amzn" in nom_ticker:
                nom_ticker = "amzn"
            elif "nvda" in nom_ticker:
                nom_ticker = "nvda"
            elif "sp500" in nom_ticker or "s&p" in nom_ticker:
                nom_ticker = "^gspc"
            elif "doge" in nom_ticker or "dogecoin" in nom_ticker:
                nom_ticker = "doge-usd"
            elif "ada" in nom_ticker or "cardano" in nom_ticker:
                nom_ticker = "ada-usd"
            elif "sol" in nom_ticker or "solana" in nom_ticker:
                nom_ticker = "sol-usd"
            elif "gold" in nom_ticker or "or" in nom_ticker:
                nom_ticker = "gc=F"
            elif "xrp" in nom_ticker or "ripple" in nom_ticker:
                nom_ticker = "xrp-usd"
            elif "bnb" in nom_ticker:
                nom_ticker = "bnb-usd"
            elif "cl" in nom_ticker or "petrole" in nom_ticker or "p√©trole" in nom_ticker:
                nom_ticker = "cl=F"
            elif "si" in nom_ticker or "argent" in nom_ticker:
                nom_ticker = "si=F"
            elif "matic" in nom_ticker or "polygon" in nom_ticker:
                nom_ticker = "matic-usd"
            elif "uni" in nom_ticker or "uniswap" in nom_ticker:
                nom_ticker = "uni-usd"
            elif "ndx" in nom_ticker or "nasdaq" in nom_ticker or "nasdaq100" in nom_ticker:
                nom_ticker = "^ndx"
        
        # --- Bloc Salutations Simples ---
        if not message_bot and any(mot in question_clean for mot in ["salut", "bonjour", "bonsoir", "yo", "coucou", "hey", "√ßa va", "quoi de neuf", "tu fais quoi", "tu es l√†", "tu m'entends", "tu vas bien", "qui es-tu", "t'es qui", "bonne nuit", "bonne journ√©e"]):
    
            reponses_salut_simples = [
                "üëæ Hey ! Moi c‚Äôest AVA, votre copilote futuriste.",
                "üéØ Toujours connect√©e ! Que puis-je faire pour vous ?",
                "üß† Pr√©sente et pr√™te √† analyser les signaux !",
                "üòé Yo ! Pr√™t pour une session d‚Äôanalyse ou un peu de culture ?",
                "‚ú® Hello ! Vous voulez une blague, une info bourse ou un fait insolite ?"
            ]

            reponses_salut_precises = {
                "quoi de neuf": "Pas mal de choses en r√©alit√© ! Le monde bouge vite... et moi aussi üòÑ",
                "√ßa va": "Toujours au top, pr√™t(e) √† vous aider ! Et vous ?",
                "salut": "Salut √† vous ! Que puis-je faire aujourd‚Äôhui ?",
                "bonjour": "Bonjour ! Je suis ravie de vous retrouver üòä",
                "coucou": "Coucou ! Vous voulez parler de bourse, culture ou autre ?",
                "bonne nuit": "Bonne nuit üåô Faites de beaux r√™ves et reposez-vous bien.",
                "bonne journ√©e": "Merci, √† vous aussi ! Que votre journ√©e soit productive üí™",
                "tu fais quoi": "Je surveille le march√©, je pr√©pare des r√©ponses... et je suis toujours dispo !",
                "tu es l√†": "Je suis toujours l√† ! M√™me quand vous ne me voyez pas üëÄ",
                "tu m'entends": "Je vous entends fort et clair üéß",
                "tu vas bien": "Je vais tr√®s bien, merci ! Et vous, comment √ßa va ?",
                "qui es-tu": "Je suis AVA, une IA qui allie analyse boursi√®re, culture g√©n√©rale et fun üòé",
                "t'es qui": "Je suis AVA, votre assistante virtuelle. Curieuse, fut√©e, toujours l√† pour vous."
            }

            # R√©ponse cibl√©e si la phrase est dans le dictionnaire
            if question_clean in reponses_salut_precises:
                message_bot = reponses_salut_precises[question_clean]
            else:
                message_bot = random.choice(reponses_salut_simples)

        
        # --- Bloc Quiz de culture g√©n√©rale ---
        if not message_bot and any(mot in question_clean for mot in [
            "quiz", "quizz", "question", "culture g√©n√©rale", "pose-moi une question", "teste mes connaissances"
        ]):
            quizz_culture = [
                {"question": "üåç Quelle est la capitale de l'Australie ?", "r√©ponse": "canberra"},
                {"question": "üß™ Quel est l'√©l√©ment chimique dont le symbole est O ?", "r√©ponse": "oxyg√®ne"},
                {"question": "üñºÔ∏è Qui a peint la Joconde ?", "r√©ponse": "l√©onard de vinci"},
                {"question": "üìö Combien y a-t-il de continents sur Terre ?", "r√©ponse": "7"},
                {"question": "üöÄ Quelle plan√®te est la plus proche du Soleil ?", "r√©ponse": "mercure"},
                {"question": "üá´üá∑ Qui a √©crit 'Les Mis√©rables' ?", "r√©ponse": "victor hugo"},
                {"question": "üé¨ Quel film a remport√© l'Oscar du meilleur film en 1998 avec 'Titanic' ?", "r√©ponse": "titanic"},
                {"question": "üêò Quel est le plus grand animal terrestre ?", "r√©ponse": "√©l√©phant"},
                {"question": "üéº Quel musicien est surnomm√© 'le Roi de la Pop' ?", "r√©ponse": "michael jackson"},
                {"question": "‚öΩ Quelle nation a remport√© la Coupe du Monde 2018 ?", "r√©ponse": "france"}
            ]
            question_choisie = random.choice(quizz_culture)
            st.session_state["quiz_attendu"] = question_choisie["r√©ponse"].lower()
            message_bot = f"üß† **Quiz Culture G** :\n{question_choisie['question']}\n\nR√©pondez directement !"

        # --- V√©rification de la r√©ponse au quiz ---
        elif "quiz_attendu" in st.session_state and st.session_state["quiz_attendu"]:
            reponse_attendue = st.session_state["quiz_attendu"]
            if question_clean.lower() == reponse_attendue:
                message_bot = "‚úÖ Bonne r√©ponse ! Vous avez l‚Äôesprit aff√ªt√© üß†üí™"
            else:
                message_bot = f"‚ùå Oops ! Ce n'√©tait pas √ßa... La bonne r√©ponse √©tait **{reponse_attendue.capitalize()}**."
            st.session_state["quiz_attendu"] = ""

        # --- Bloc Faits Insolites ---
        # √Ä ins√©rer juste avant le bloc catch-all final
        if not message_bot and any(mot in question_clean for mot in ["fait insolite", "truc fou", "surprends-moi", "anecdote", "incroyable mais vrai"]):
            faits_insolites = [
                "üêô Un poulpe a trois c≈ìurs‚Ä¶ et son sang est bleu !",
                "üöΩ Plus de gens poss√®dent un t√©l√©phone portable qu‚Äôune brosse √† dents.",
                "üêå Un escargot peut dormir pendant trois ans d‚Äôaffil√©e.",
                "üåã Il y a plus de volcans sous l‚Äôeau que sur la terre ferme.",
                "üì¶ Amazon a √©t√© fond√©e dans un garage... et maintenant, ils livrent m√™me des frigos !",
                "üß† Le cerveau humain g√©n√®re assez d‚Äô√©lectricit√© pour allumer une petite ampoule.",
                "üåï On a d√©couvert de la glace sur la Lune, et m√™me des poches d‚Äôeau sur Mars !",
                "üîã Un √©clair contient assez d'√©nergie pour faire griller 100 000 toasts.",
                "üï∑Ô∏è Certaines araign√©es peuvent planer dans les airs √† l‚Äôaide de fils de soie‚Ä¶ c‚Äôest le *ballooning* !",
                "ü¶ë Le calmar g√©ant a les plus grands yeux du r√®gne animal, aussi gros qu‚Äôun ballon de foot !",
                "üßä Les manchots proposent parfois des galets comme cadeau de s√©duction.",
                "üöÄ Les astronautes peuvent grandir de quelques centim√®tres dans l‚Äôespace √† cause de la microgravit√©.",
                "ü•∂ L‚Äôeau chaude peut geler plus vite que l‚Äôeau froide. C‚Äôest l‚Äôeffet Mpemba.",
                "üê• Les canetons s‚Äôattachent √† la premi√®re chose qu‚Äôils voient ‚Äî c‚Äôest l‚Äôempreinte.",
                "üçï En Italie, il existe une pizza avec 111 sortes de fromages dessus !",
                "üéµ Les abeilles peuvent reconna√Ætre des visages humains‚Ä¶ et elles adorent les sons aigus.",
                "üåç Il y a plus d‚Äôarbres sur Terre que d‚Äô√©toiles dans la Voie lact√©e.",
                "üëÖ La langue est aussi unique qu‚Äôune empreinte digitale.",
                "üöø En moyenne, une personne passe **6 mois de sa vie sous la douche**.",
                "üéà Une banane est techniquement une baie. Mais pas la fraise !",
                "ü¶ô Les alpagas peuvent cracher‚Ä¶ mais seulement s‚Äôils sont vraiment √©nerv√©s.",
                "‚è≥ Les crocodiles peuvent vivre plus de 100 ans‚Ä¶ et certains ne meurent que de vieillesse.",
                "üêì Les poules peuvent se souvenir de plus de 100 visages humains ou animaux.",
                "ü¶á Les chauves-souris tournent toujours √† gauche en sortant d‚Äôune grotte.",
                "üõ∏ Il existe un endroit sur Terre o√π la gravit√© semble invers√©e : la Mystery Spot en Californie.",
                "üéÆ Un gamer japonais d√©tient le record mondial du plus long temps pass√© √† jouer sans pause : 35 heures !",
                "üßÄ Le plus grand fromage jamais fabriqu√© pesait 57 tonnes‚Ä¶ il fallait une grue pour le d√©placer.",
                "üå≤ Un arbre peut communiquer avec un autre √† plusieurs kilom√®tres via des signaux chimiques.",
                "üê† Certains poissons changent de sexe au cours de leur vie.",
                "üåû Si le Soleil √©tait de la taille d‚Äôune porte, la Terre serait une pi√®ce de monnaie."

            ]
            message_bot = random.choice(faits_insolites)
        # --- Bloc Recettes rapides ---
        elif any(mot in question_clean for mot in ["recette", "cuisine", "plat rapide", "id√©e repas", "je mange quoi"]):
            recettes = [
                "ü•™ **Sandwich thon-avocat** : pain complet, thon, avocat √©cras√©, citron, sel, poivre. 5 minutes chrono !",
                "üçù **P√¢tes √† l‚Äôail** : p√¢tes + ail √©minc√© + huile d‚Äôolive + herbes. Simple, rapide, efficace.",
                "üç≥ **Omelette fromage** : ≈ìufs battus, sel, poivre, fromage r√¢p√©. 5 minutes √† la po√™le !",
                "ü•ó **Salade express** : tomates cerises, mozzarella, roquette, huile d‚Äôolive, vinaigre balsamique.",
                "üåØ **Wrap poulet-crudit√©s** : galette + restes de poulet + salade + sauce yaourt.",
                "ü•î **Pommes de terre saut√©es** : en cubes, √† la po√™le avec ail et persil. Parfait avec des ≈ìufs !",
                "üç≤ **Soupe express** : l√©gumes surgel√©s mix√©s + cube bouillon + cr√®me l√©g√®re. Pr√™te en 10 minutes.",
                "üçû **Croque-monsieur rapide** : pain de mie, jambon, fromage, 5 min au grill ou √† la po√™le.",
                "ü•í **Tartines fra√Æcheur** : pain grill√©, fromage frais, concombre, citron et herbes.",
                "üçö **Riz saut√© aux l√©gumes** : reste de riz + l√©gumes + ≈ìuf + sauce soja. Un wok express !",
                "üçó **Poulet minute au curry** : d√©s de poulet + cr√®me + curry + oignon, √† la po√™le en 10 min.",
                "üç≥ **≈íufs brouill√©s cr√©meux** : ≈ìufs + beurre + sel + poivre, cuisson douce pour onctuosit√©.",
                "üßÑ **P√¢tes ail-persil** : ail dor√© √† la po√™le, persil frais, huile d‚Äôolive, et hop sur les p√¢tes !",
                "ü•ë **Toast avocat-≈ìuf** : pain grill√© + avocat √©cras√© + ≈ìuf au plat ou mollet.",
                "üåÆ **Tacos express** : galette + steak hach√© ou haricots + tomate + salade + sauce.",
                "ü•î **Gratin express au micro-ondes** : pommes de terre en tranches fines + cr√®me + fromage.",
                "üçÖ **Tomates mozzarella** : tranches de tomates + mozzarella + basilic + huile d‚Äôolive. Simple et frais.",
                "üßÄ **Quesadilla express** : deux tortillas + fromage + restes au choix + po√™le 5 min chaque c√¥t√©.",
                "üç≥ **Mini shakshuka rapide** : tomates en d√©s + ≈ìufs + cumin dans une petite po√™le. Un d√©lice !",
                "ü•£ **Bowl sucr√© express** : fromage blanc + fruits + flocons d‚Äôavoine + miel. Parfait au petit dej.",
                "ü•ï **B√¢tonnets carottes-concombre** : tremp√©s dans du houmous ou une sauce yaourt. Frais et sain.",
                "üçû **Pain perdu rapide** : tranches de pain + ≈ìuf + lait + sucre, √† la po√™le jusqu‚Äô√† dorure.",
                "üç† **Patate douce micro-ondes** : piqu√©e √† la fourchette, 7 min puissance max, √† garnir √† volont√©.",
                "ü•í **Taboul√© express** : semoule, tomate, menthe, citron, huile d‚Äôolive. Hydratation 5 min √† l‚Äôeau chaude.",
                "üçå **Banana pancakes** : 1 banane + 2 ≈ìufs, m√©lang√©s et cuits en petites galettes. Sans farine !",
                "üßà **Wrap beurre de cacahu√®te-banane** : rapide, √©nerg√©tique, parfait en collation !",
                "üçΩÔ∏è **Assiette anti-gaspi** : reste de p√¢tes, l√©gumes et un ≈ìuf, m√©lang√©s et po√™l√©s fa√ßon wok !"

            ]
            message_bot = f"üçΩÔ∏è Une petite faim ? Voici une id√©e :\n\n{random.choice(recettes)}"

        # --- Bloc Mini base g√©n√©rale (culture quotidienne) ---
        if not message_bot:
            base_generale = {
                # üåç M√©t√©o & nature
                "quelle est la temp√©rature id√©ale pour un √™tre humain": "üå°Ô∏è La temp√©rature corporelle id√©ale est autour de 36,5 √† 37¬∞C.",
                "qu'est-ce qu'un ouragan": "üåÄ Un ouragan est une temp√™te tropicale tr√®s puissante, form√©e au-dessus des oc√©ans chauds.",
                "comment se forme un arc-en-ciel": "üåà Un arc-en-ciel se forme par la r√©fraction, la r√©flexion et la dispersion de la lumi√®re dans les gouttelettes d'eau.",
                "quelle est la temp√©rature id√©ale pour un √™tre humain": "üå°Ô∏è La temp√©rature corporelle id√©ale est autour de 36,5 √† 37¬∞C.",
                "qu'est-ce qu'un ouragan": "üåÄ Un ouragan est une temp√™te tropicale tr√®s puissante, form√©e au-dessus des oc√©ans chauds.",
                "comment se forme un arc-en-ciel": "üåà Un arc-en-ciel se forme par la r√©fraction, la r√©flexion et la dispersion de la lumi√®re dans les gouttelettes d'eau.",
                "qu'est-ce qu'une tornade": "üå™Ô∏è Une tornade est une colonne d'air en rotation rapide qui touche le sol, souvent destructrice.",
                "quelle est la temp√©rature la plus basse jamais enregistr√©e": "‚ùÑÔ∏è La temp√©rature la plus basse a √©t√© enregistr√©e en Antarctique : -89,2¬∞C √† la station Vostok.",
                "pourquoi le ciel est bleu": "‚òÄÔ∏è La lumi√®re du Soleil se diffuse dans l‚Äôatmosph√®re. Le bleu est plus dispers√©, d'o√π la couleur du ciel.",
                "pourquoi les feuilles tombent en automne": "üçÇ Les arbres perdent leurs feuilles pour √©conomiser de l‚Äôeau et de l‚Äô√©nergie pendant l‚Äôhiver.",
                "comment na√Æt un orage": "‚ö° Un orage na√Æt d‚Äôun choc thermique entre de l‚Äôair chaud et humide et de l‚Äôair froid en altitude.",
                "qu'est-ce que le changement climatique": "üåç C‚Äôest l'√©volution √† long terme du climat de la Terre, caus√©e en partie par les activit√©s humaines.",
    
                # üêæ Animaux
                "combien de c≈ìurs a une pieuvre": "üêô Une pieuvre a **trois c≈ìurs** ! Deux pour les branchies et un pour le corps.",
                "quel est l‚Äôanimal le plus rapide du monde": "üêÜ Le gu√©pard est l‚Äôanimal terrestre le plus rapide, avec une pointe √† 112 km/h.",
                "quel animal pond des ≈ìufs mais allaite": "ü¶ò L‚Äôornithorynque ! Un mammif√®re unique qui pond des ≈ìufs et allaite ses petits.",
                "quel est l‚Äôanimal le plus grand du monde": "üêã La **baleine bleue** est l‚Äôanimal le plus grand, pouvant d√©passer 30 m√®tres de long.",
                "quel est l‚Äôanimal le plus petit": "ü¶† Le **colibri d‚ÄôH√©l√®ne** est l‚Äôun des plus petits oiseaux, pesant moins de 2 grammes.",
                "quel animal vit le plus longtemps": "üê¢ La **tortue g√©ante** peut vivre plus de 150 ans !",
                "quel est l‚Äôoiseau qui ne vole pas": "üêß Le **manchot** est un oiseau qui ne vole pas mais excelle dans l‚Äôeau.",
                "quel animal change de couleur": "ü¶é Le **cam√©l√©on** peut changer de couleur pour se camoufler ou communiquer.",
                "quels animaux hibernent": "üêª L‚Äôours, la marmotte ou encore le h√©risson **hibernent** pendant l‚Äôhiver.",
                "quel animal a la meilleure vue": "ü¶Ö L‚Äô**aigle** a une vue per√ßante, capable de rep√©rer une proie √† des kilom√®tres.",
                "quel est le plus gros f√©lin": "üêÖ Le **tigre de Sib√©rie** est le plus gros des f√©lins sauvages.",
                "quel animal pond le plus d'≈ìufs": "üêî La **poule** peut pondre jusqu‚Äô√† 300 ≈ìufs par an, mais certains poissons comme le cabillaud pondent des millions d'≈ìufs !",
                "quel animal vit dans les abysses": "üåå Le **poisson-lanterne** est l‚Äôun des habitants √©tranges des abysses marins.",
                "quels animaux vivent en meute": "üê∫ Les **loups**, les **chiens sauvages** ou encore les **hy√®nes** vivent en meute pour chasser.",
                "quel animal a la langue la plus longue": "üëÖ Le **cam√©l√©on** peut projeter sa langue jusqu‚Äô√† deux fois la longueur de son corps.",
                "quel animal a le venin le plus mortel": "‚ò†Ô∏è Le **c√¥ne g√©ographique**, un petit escargot marin, poss√®de un venin redoutable.",
                "quel est l‚Äôanimal le plus rapide dans l‚Äôeau": "üê¨ Le **voilier de l‚ÄôIndo-Pacifique** peut nager √† pr√®s de 110 km/h !",
                "quel est le cri du renard": "ü¶ä Le renard pousse un cri strident, souvent assimil√© √† un hurlement ou un aboiement sec.",
                "quel animal peut survivre dans l‚Äôespace": "üõ∞Ô∏è Le **tardigrade**, aussi appel√© ourson d‚Äôeau, est capable de survivre au vide spatial.",
                "quels animaux sont nocturnes": "üåô Les **chauves-souris**, **hiboux** ou encore **f√©lins** sont actifs principalement la nuit.",
    
                # üî¨ Science
                "qu'est-ce que la gravit√©": "üåå La gravit√© est une force qui attire deux masses l'une vers l'autre, comme la Terre attire les objets vers elle.",
                "combien de plan√®tes dans le syst√®me solaire": "ü™ê Il y a 8 plan√®tes : Mercure, V√©nus, Terre, Mars, Jupiter, Saturne, Uranus, Neptune.",
                "quelle est la plus petite particule": "‚öõÔ∏è Le quark est l'une des plus petites particules connues dans la physique quantique.",
                "qu'est-ce qu'un atome": "‚öõÔ∏è Un **atome** est la plus petite unit√© de mati√®re, compos√©e d‚Äô√©lectrons, de protons et de neutrons.",
                "quelle est la diff√©rence entre masse et poids": "‚öñÔ∏è La **masse** est constante, le **poids** d√©pend de la gravit√©. On p√®se moins sur la Lune que sur Terre !",
                "qu'est-ce que l'effet de serre": "üåç L‚Äô**effet de serre** est un ph√©nom√®ne naturel qui retient la chaleur dans l‚Äôatmosph√®re gr√¢ce √† certains gaz.",
                "qu'est-ce qu'un trou noir": "üï≥Ô∏è Un **trou noir** est une r√©gion de l‚Äôespace o√π la gravit√© est si forte que m√™me la lumi√®re ne peut s‚Äôen √©chapper.",
                "quelle est la vitesse de la lumi√®re": "üí° Environ **299 792 km/s**. C‚Äôest la vitesse maximale dans l‚Äôunivers selon la physique actuelle.",
                "qu'est-ce que l'ADN": "üß¨ L‚Äô**ADN** est la mol√©cule qui contient toutes les instructions g√©n√©tiques d‚Äôun √™tre vivant.",
                "comment fonctionne un aimant": "üß≤ Un **aimant** attire certains m√©taux gr√¢ce √† un champ magn√©tique g√©n√©r√© par ses √©lectrons.",
                "qu'est-ce que l'√©lectricit√©": "‚ö° C‚Äôest un flux de particules appel√©es **√©lectrons** circulant dans un conducteur.",
                "qu'est-ce que le big bang": "üåå Le **Big Bang** est la th√©orie selon laquelle l‚Äôunivers a commenc√© par une √©norme explosion il y a 13,8 milliards d‚Äôann√©es.",
                "comment se forme une √©toile": "‚≠ê Une **√©toile** na√Æt dans un nuage de gaz et de poussi√®re qui s‚Äôeffondre sous sa propre gravit√©.",
                "qu'est-ce que l‚ÄôADN": "üß¨ L‚ÄôADN est une mol√©cule porteuse d'informations g√©n√©tiques, pr√©sente dans chaque cellule.",
                "qu'est-ce que la photosynth√®se": "üå± C‚Äôest le processus par lequel les plantes transforment la lumi√®re du soleil en √©nergie.",
                "qu'est-ce qu'une √©clipse": "üåë Une **√©clipse** se produit quand la Lune ou la Terre se place entre le Soleil et l‚Äôautre corps, bloquant partiellement la lumi√®re.",
                "quelle est la temp√©rature du soleil": "‚òÄÔ∏è La surface du Soleil atteint environ **5 500¬∞C**, mais son noyau d√©passe les **15 millions de degr√©s** !",
                "qu'est-ce qu'un vaccin": "üíâ Un **vaccin** stimule le syst√®me immunitaire pour qu‚Äôil apprenne √† se d√©fendre contre un virus ou une bact√©rie.",
                "c‚Äôest quoi un neutron": "üß™ Un **neutron** est une particule subatomique pr√©sente dans le noyau des atomes, sans charge √©lectrique.",
    
                # üìö Histoire
                "qui √©tait napol√©on": "üëë Napol√©on Bonaparte √©tait un empereur fran√ßais du XIXe si√®cle, c√©l√®bre pour ses conqu√™tes militaires.",
                "en quelle ann√©e la tour eiffel a √©t√© construite": "üóº Elle a √©t√© achev√©e en **1889** pour l'Exposition universelle de Paris.",
                "quelle guerre a eu lieu en 1914": "‚öîÔ∏è La Premi√®re Guerre mondiale a commenc√© en 1914 et s'est termin√©e en 1918.","qui a d√©couvert l'am√©rique": "üåé **Christophe Colomb** a d√©couvert l‚ÄôAm√©rique en 1492, m√™me si des peuples y vivaient d√©j√†.",
                "quand a eu lieu la r√©volution fran√ßaise": "‚öîÔ∏è La **R√©volution fran√ßaise** a commenc√© en **1789** et a profond√©ment chang√© la soci√©t√© fran√ßaise.",
                "qui √©tait cl√©op√¢tre": "üëë **Cl√©op√¢tre** √©tait la derni√®re reine d'√âgypte, c√©l√®bre pour son intelligence et son alliance avec Jules C√©sar.",
                "quand a eu lieu la seconde guerre mondiale": "üåç La **Seconde Guerre mondiale** a dur√© de **1939 √† 1945** et impliqu√© de nombreux pays du globe.",
                "qui √©tait charlemagne": "üõ°Ô∏è **Charlemagne** √©tait un empereur franc du Moyen √Çge, consid√©r√© comme le p√®re de l‚ÄôEurope.",
                "qui a construit les pyramides": "üî∫ Les **anciens √âgyptiens** ont construit les pyramides il y a plus de 4 500 ans comme tombes pour les pharaons.",
                "quand l‚Äôhomme a-t-il march√© sur la lune": "üåï **Neil Armstrong** a pos√© le pied sur la Lune le **20 juillet 1969** lors de la mission Apollo 11.",
                "qui √©tait hitler": "‚ö†Ô∏è **Adolf Hitler** √©tait le dictateur de l‚ÄôAllemagne nazie, responsable de la Seconde Guerre mondiale et de la Shoah.",
                "qu‚Äôest-ce que la guerre froide": "üßä La **guerre froide** fut une p√©riode de tension entre les √âtats-Unis et l‚ÄôURSS entre 1947 et 1991, sans affrontement direct.",
                "qui a invent√© l‚Äôimprimerie": "üñ®Ô∏è **Gutenberg** a invent√© l‚Äôimprimerie moderne au 15e si√®cle, r√©volutionnant la diffusion du savoir.",
                "qui √©tait louis xiv": "üëë **Louis XIV**, aussi appel√© le Roi Soleil, a r√©gn√© sur la France pendant 72 ans, de 1643 √† 1715.",
                "quelle est la plus ancienne civilisation connue": "üè∫ La **civilisation sum√©rienne** en M√©sopotamie est l‚Äôune des plus anciennes connues, datant de -3000 av. J.-C.",
                "quand a √©t√© sign√©e la d√©claration des droits de l‚Äôhomme": "üìù En **1789**, pendant la R√©volution fran√ßaise.",
                "qu‚Äôest-ce que la renaissance": "üé® Une p√©riode de renouveau artistique et scientifique en Europe, entre le 14e et le 17e si√®cle.",
    
                # üß† Connaissances g√©n√©rales
                "quelle est la langue officielle du br√©sil": "üáßüá∑ C‚Äôest le **portugais**.",
                "combien de dents a un adulte": "ü¶∑ Un adulte poss√®de g√©n√©ralement **32 dents**.",
                "qu'est-ce que le code morse": "üì° C‚Äôest un syst√®me de communication utilisant des points et des tirets.",
                "quelle est la langue la plus parl√©e au monde": "üó£Ô∏è Le mandarin (chinois) est la langue la plus parl√©e au monde en nombre de locuteurs natifs.",
                "quelle est la langue officielle du br√©sil": "üáßüá∑ La langue officielle du Br√©sil est le **portugais**.",
                "combien de dents a un adulte": "ü¶∑ Un adulte poss√®de g√©n√©ralement **32 dents**.",
                "qu'est-ce que le code morse": "üì° C‚Äôest un syst√®me de communication utilisant des points et des tirets pour repr√©senter des lettres.",
                "qui a invent√© l'imprimerie": "üñ®Ô∏è **Johannes Gutenberg** a invent√© l'imprimerie moderne vers 1450.",
                "quel est l‚Äôaliment le plus consomm√© au monde": "üçö Le **riz** est l‚Äôun des aliments les plus consomm√©s sur la plan√®te.",
                "combien de litres d‚Äôeau faut-il pour faire un jean": "üëñ Il faut environ **7 000 √† 10 000 litres** d'eau pour fabriquer un seul jean.",
                "quel est l'objet le plus utilis√© au quotidien": "üì± Le **t√©l√©phone portable** est l‚Äôobjet le plus utilis√© au quotidien.",
                "qu‚Äôest-ce que le pH": "üß™ Le pH mesure l‚Äôacidit√© ou l‚Äôalcalinit√© d‚Äôune solution, de 0 (acide) √† 14 (alcalin).",
                "combien de pays font partie de l‚ÄôUnion europ√©enne": "üá™üá∫ L‚ÄôUnion europ√©enne regroupe **27 pays membres** (apr√®s le Brexit).",
                "combien de lettres dans l‚Äôalphabet": "üî§ L‚Äôalphabet latin compte **26 lettres**.",
                "quelle est la monnaie du japon": "üí¥ La monnaie du Japon est le **yen**.",
                "quel est le sport le plus pratiqu√© dans le monde": "‚öΩ Le football est le sport le plus populaire et pratiqu√© dans le monde.",
                "qu‚Äôest-ce qu‚Äôun QR code": "üî≥ Un QR code est un code barre 2D qui peut contenir des liens, des infos ou des paiements.",
                "qu‚Äôest-ce qu‚Äôun satellite": "üõ∞Ô∏è Un satellite est un objet plac√© en orbite autour d'une plan√®te pour collecter ou transmettre des donn√©es.",
                "que veut dire wifi": "üì∂ Wi-Fi signifie **Wireless Fidelity**, une technologie sans fil pour transmettre des donn√©es.",
                "combien y a-t-il de c√¥t√©s dans un hexagone": "üî∫ Un hexagone a **6 c√¥t√©s**.",
                "qu‚Äôest-ce que l‚ÄôADN": "üß¨ L‚ÄôADN (acide d√©soxyribonucl√©ique) contient toutes les informations g√©n√©tiques d‚Äôun √™tre vivant.",
                # üßÆ Maths & Logique
                "quelle est la racine carr√©e de 64": "üìê La racine carr√©e de 64 est **8**.",
                "combien font 7 fois 9": "üß† 7 multipli√© par 9 √©gale **63**.",
                "quel est le chiffre pi": "üî¢ Le chiffre **pi (œÄ)** est une constante math√©matique d‚Äôenviron **3,14159**.",
                "combien y a-t-il de c√¥t√©s dans un hexagone": "üìè Un **hexagone** poss√®de **6 c√¥t√©s**.",
                "quel est le plus grand nombre premier connu": "üí° Le plus grand nombre premier connu est gigantesque, avec **plus de 24 millions de chiffres** !",
                "qu'est-ce qu'un nombre pair": "‚öñÔ∏è Un **nombre pair** est divisible par 2 sans reste, comme 2, 4, 6, etc.",
                "qu‚Äôest-ce qu‚Äôun triangle isoc√®le": "üî∫ Un **triangle isoc√®le** a deux c√¥t√©s de m√™me longueur.",
                "qu‚Äôest-ce qu‚Äôun pourcentage": "üìä Un **pourcentage** repr√©sente une proportion sur 100.",
                "quelle est la moiti√© de 250": "‚úÇÔ∏è La moiti√© de 250 est **125**.",
                "comment convertir des degr√©s en radians": "üßÆ Multipliez les degr√©s par œÄ et divisez par 180 pour obtenir des **radians**.",
                "qu‚Äôest-ce qu‚Äôun multiple": "üîÅ Un **multiple** d‚Äôun nombre est le r√©sultat de sa multiplication par un entier.",
                "qu‚Äôest-ce que le th√©or√®me de pythagore": "üìê Dans un triangle rectangle, **a¬≤ + b¬≤ = c¬≤**, o√π c est l‚Äôhypot√©nuse.",
                "quelle est la racine carr√©e de 144": "üßÆ La racine carr√©e de 144 est **12**.",
                "combien font 12 fois 8": "üìä 12 multipli√© par 8 √©gale **96**.",
    
                # üó∫Ô∏è G√©ographie bonus
                "quel est le plus long fleuve du monde": "üåä Le Nil et l‚ÄôAmazone se disputent le titre, mais l‚ÄôAmazone est souvent consid√©r√© comme le plus long.",
                "quel est le pays le plus peupl√©": "üë• La Chine est le pays le plus peupl√©, avec plus d‚Äô1,4 milliard d‚Äôhabitants.",
                "quel est le plus grand d√©sert du monde": "üèúÔ∏è Le **d√©sert de l‚ÄôAntarctique** est le plus grand au monde, m√™me s‚Äôil est froid !",
                "quelle est la plus haute montagne du monde": "üóª L‚Äô**Everest**, avec **8 848 m√®tres**, est la plus haute montagne du monde.",
                "quel est le pays le plus petit du monde": "üìè Le **Vatican** est le plus petit pays, avec moins de 1 km¬≤.",
                "quel est le pays le plus grand du monde": "üåç La **Russie** est le plus vaste pays du monde.",
                "quel est le fleuve le plus long d'europe": "üåä Le **Volga** est le fleuve le plus long d‚ÄôEurope.",
                "quels pays traversent les alpes": "‚õ∞Ô∏è Les Alpes traversent la **France, l‚ÄôItalie, la Suisse, l‚ÄôAllemagne, l‚ÄôAutriche, la Slov√©nie et le Liechtenstein**.",
                "o√π se trouve le mont kilimandjaro": "üåÑ Le **Kilimandjaro** se trouve en **Tanzanie**.",
                "quelle est la mer la plus sal√©e": "üåä La **mer Morte** est la plus sal√©e au monde.",
                "quelles sont les capitales des pays baltes": "üá™üá™ üá±üáª üá±üáπ Les capitales sont **Tallinn** (Estonie), **Riga** (Lettonie) et **Vilnius** (Lituanie).",
                "quelle est la capitale de l‚Äôaustralie": "ü¶ò La capitale de l‚ÄôAustralie est **Canberra**, pas Sydney !",
                "quelle est l‚Äô√Æle la plus grande du monde": "üèùÔ∏è **Le Groenland** est la plus grande √Æle du monde (hors continent).",
                "quel pays a le plus de fuseaux horaires": "üåê La **France** (gr√¢ce √† ses territoires) a le plus de fuseaux horaires : **12** !",
    
                # ‚è∞ Temps & Calendrier
                "combien y a-t-il de jours dans une ann√©e": "üìÖ Une ann√©e classique compte **365 jours**, et **366** lors des ann√©es bissextiles.",
                "quels sont les mois de l'√©t√©": "‚òÄÔ∏è En France, l'√©t√© comprend **juin, juillet et ao√ªt**."
            }

            for question_base, reponse_base in base_generale.items():
                if question_base in question_clean:
                    message_bot = reponse_base
                    break

        # --- Bloc d'intelligence s√©mantique locale ---
        if not message_bot:
            base_savoir = {
                # Mets ici toutes tes questions/r√©ponses actuelles (animaux, science, m√©t√©o, etc.)
                "quel est le plus grand animal terrestre": "üêò L‚Äô√©l√©phant d‚ÄôAfrique est le plus grand animal terrestre.",
                "combien de dents poss√®de un adulte": "ü¶∑ Un adulte a g√©n√©ralement 32 dents, y compris les dents de sagesse.",
                "comment se forme un arc-en-ciel": "üåà Il se forme quand la lumi√®re se r√©fracte et se r√©fl√©chit dans des gouttelettes d‚Äôeau.",
                "quelle est la temp√©rature normale du corps humain": "üå°Ô∏è Elle est d‚Äôenviron 36,5 √† 37¬∞C.",
                "quelle plan√®te est la plus proche du soleil": "‚òÄÔ∏è C‚Äôest **Mercure**, la plus proche du Soleil.",
                "combien y a-t-il de continents": "üåç Il y a **7 continents** : Afrique, Am√©rique du Nord, Am√©rique du Sud, Antarctique, Asie, Europe, Oc√©anie.",
                "quelle est la capitale du br√©sil": "üáßüá∑ La capitale du Br√©sil est **Brasilia**.",
                "quelle est la langue parl√©e au mexique": "üá≤üáΩ La langue officielle du Mexique est l‚Äô**espagnol**.",
                "qu'est-ce qu'une √©clipse lunaire": "üåï C‚Äôest quand la Lune passe dans l‚Äôombre de la Terre, elle peut appara√Ætre rouge√¢tre.",
                "quelle est la formule de l‚Äôeau": "üíß La formule chimique de l‚Äôeau est **H‚ÇÇO**.",
                "qu'est-ce que le code binaire": "üßÆ Le code binaire est un langage informatique utilisant seulement des 0 et des 1."
            }

            questions_connues = list(base_savoir.keys())
            vecteurs_base = model_semantic.encode(questions_connues)
            vecteur_question = model_semantic.encode([question_clean])
            similarites = cosine_similarity([vecteur_question[0]], vecteurs_base)[0]

            meilleure_correspondance = max(zip(questions_connues, similarites), key=lambda x: x[1])

            if meilleure_correspondance[1] > 0.7:
                message_bot = base_savoir[meilleure_correspondance[0]]

        
        # --- Bloc catch-all pour l'analyse technique ou r√©ponse par d√©faut ---
        if not message_bot:
            if any(phrase in question_clean for phrase in ["hello", "hi", "good morning", "good afternoon", "good evening"]):
                message_bot = "Hello! I'm here and ready to help. How can I assist you today?"
            else:
                reponses_ava = [
                    "I'm here to help, but I need a bit more detail ü§ñ",
                    "I didn't quite understand that; could you please rephrase?",
                    "This subject is still a bit unclear to me... I can talk about technical analysis, weather, news, and much more!",
                    "Hmm... That's not in my database yet. Try another phrasing or type 'complete analysis' for a market overview üìä"
                ]
                message_bot = random.choice(reponses_ava)


    # --- Bloc Traduction corrig√© ---
        def traduire_deepl(texte, langue_cible="EN", api_key="0f57cbca-eac1-4c8a-b809-11403947afe4:fx"):
            url = "https://api-free.deepl.com/v2/translate"
            params = {
                "auth_key": api_key,
                "text": texte,
                "target_lang": langue_cible
            }
            headers = {"Content-Type": "application/x-www-form-urlencoded"}
            # D√©tecter la langue de la question et loguer le r√©sultat
            try:
                lang_question = detect(question)
            except Exception as e:
                lang_question = "fr"
            if lang_question.lower() != "fr" and message_bot.strip():
                traduction = traduire_deepl(message_bot, langue_cible=lang_question.upper())
                message_bot = traduction
            
        st.markdown(message_bot)
        st.session_state.messages.append({"role": "assistant", "content": message_bot})
        st.sidebar.button("ü™õ Effacer les messages", on_click=lambda: st.session_state.__setitem__("messages", []))

