import streamlit as st
import os
import pandas as pd
from analyse_technique import ajouter_indicateurs_techniques, analyser_signaux_techniques
from fonctions_chat import obtenir_reponse_ava
# Remplacez cette importation par l'appel √† la nouvelle version
#from fonctions_actualites import obtenir_actualites, get_general_news
from fonctions_meteo import obtenir_meteo, get_meteo_ville  # Nous red√©finirons get_meteo_ville ici.
import requests
from PIL import Image
from datetime import datetime
from langdetect import detect
import urllib.parse
import random
import glob
import difflib
import re  # Pour le bloc s√©curit√©, le traitement g√©ographique et l'analyse
import unicodedata  # Pour supprimer les accents
from newsapi import NewsApiClient

# Fonction pour supprimer les accents d'une cha√Æne de caract√®res
def remove_accents(input_str):
    nfkd_form = unicodedata.normalize('NFKD', input_str)
    return "".join([c for c in nfkd_form if not unicodedata.combining(c)])

# Nouvelle fonction get_meteo_ville utilisant l'API OpenWeatherMap
def get_meteo_ville(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid=3b2ff0b77dd65559ba4a1a69769221d5&units=metric&lang=fr"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            description = data["weather"][0]["description"].capitalize()
            temperature = data["main"]["temp"]
            humidity = data["main"].get("humidity", "N/A")
            wind_speed = data["wind"].get("speed", "N/A")
            return f"{description} avec {temperature}¬∞C, humidit√© : {humidity}%, vent : {wind_speed} m/s."
        else:
            return "Erreur: donn√©es m√©t√©o non disponibles."
    except Exception as e:
        return "Erreur: " + str(e)

# Nouvelle fonction get_general_news() avec la modification pour NewsAPI
def get_general_news():
    try:
        # D√©finir la cl√© API directement ici
        api_key = "681120bace124ee99d390cc059e6aca5"
        newsapi = NewsApiClient(api_key=api_key)
        top_headlines = newsapi.get_top_headlines(country="us", page_size=10)
        if not top_headlines:
            return "‚ùå Aucune donn√©e re√ßue de NewsAPI. V√©rifiez votre cl√© API et votre connexion."
        articles = top_headlines.get("articles")
        if not articles:
            return "‚ùå La r√©ponse de NewsAPI ne contient pas d'articles."
        return [(article["title"], article["url"]) for article in articles if "title" in article and "url" in article]
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration des actus via NewsApiClient : {e}"

# Fonction de traduction via l‚ÄôAPI gratuite MyMemory
def traduire_texte(texte, langue_dest):
    try:
        texte_enc = urllib.parse.quote(texte)
        url = f"https://api.mymemory.translated.net/get?q={texte_enc}&langpair=fr|{langue_dest}"
        r = requests.get(url).json()
        return r["responseData"]["translatedText"]
    except:
        return texte  # fallback

# Fonction humeur dynamique selon l'heure
def humeur_du_jour():
    heure = datetime.now().hour
    if heure < 8:
        return "üò¨ Pas tr√®s bavarde ce matin, mais je suis l√† pour vous servir !"
    elif heure < 12:
        return "‚òï Pleine d'√©nergie pour cette matin√©e ! Une analyse avec √ßa ?"
    elif heure < 17:
        return "üíº Focus total sur les march√©s, on d√©cortique tout ensemble !"
    elif heure < 21:
        return "üßò D√©tendue mais toujours efficace. Pr√™t(e) pour une analyse zen ?"
    else:
        return "üåô En mode nocturne, mais toujours connect√©e pour vous aider !"

st.set_page_config(page_title="Chat AVA", layout="centered")

heure_actuelle = datetime.now().hour
if heure_actuelle < 12:
    accueil = "üåû Bonjour ! Pr√™t(e) pour une nouvelle journ√©e de trading ?"
elif 12 <= heure_actuelle < 18:
    accueil = "‚òÄÔ∏è Bon apr√®s-midi ! Besoin d‚Äôune analyse ou d‚Äôun conseil ?"
else:
    accueil = "üåô Bonsoir ! On termine la journ√©e avec une petite analyse ?"

col1, col2 = st.columns([0.15, 0.85])
with col1:
    st.image("assets/ava_logo.png", width=60)
with col2:
    st.markdown(f"<h1 style='margin-top: 10px;'>AVA - Chat IA</h1><p>{accueil}</p>", unsafe_allow_html=True)

st.markdown(f"<p style='font-style: italic;'>{humeur_du_jour()}</p>", unsafe_allow_html=True)
st.markdown("Posez-moi vos questions sur la bourse, la m√©t√©o, les actualit√©s... ou juste pour discuter !")

if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    if message["role"] == "assistant":
        with st.chat_message("assistant", avatar="assets/ava_logo.png"):
            st.markdown(message["content"])
    else:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

# R√©cup√©ration de la question utilisateur
question = st.chat_input("Que souhaitez-vous demander √† AVA ?")

# üîí S√©curit√© : d√©tection d'entr√©e dangereuse
if question and re.search(r"[<>;{}]", question):
    st.warning("‚õî Entr√©e invalide d√©tect√©e.")
    st.stop()

if question:
    st.session_state.messages.append({"role": "user", "content": question})
    with st.chat_message("user"):
        st.markdown(question)
    with st.chat_message("assistant", avatar="assets/ava_logo.png"):
        # Traitement de la question en minuscule
        question_clean = question.lower().strip()
        message_bot = ""
        horoscope_repondu = False
        meteo_repondu = False
        actus_repondu = False
        blague_repondu = False
        analyse_complete = False

        # Nouveaux flags pour la g√©ographie, la m√©decine et les r√©ponses personnalis√©es
        geographie_repondu = False
        sante_repondu = False
        perso_repondu = False

        # --- Partie Horoscope ---
        if any(mot in question_clean for mot in ["horoscope", "signe", "astrologie"]):
            signes_disponibles = [
                "b√©lier", "taureau", "g√©meaux", "cancer", "lion", "vierge", "balance",
                "scorpion", "sagittaire", "capricorne", "verseau", "poissons"
            ]
            signe_detecte = next((s for s in signes_disponibles if s in question_clean), None)
            if not signe_detecte:
                message_bot += "üîÆ Pour vous donner votre horoscope, indiquez-moi votre **signe astrologique** (ex : Lion, Vierge...).\n\n"
                horoscope_repondu = True
            else:
                try:
                    url = "https://kayoo123.github.io/astroo-api/jour.json"
                    response = requests.get(url)
                    if response.status_code == 200:
                        data = response.json()
                        if "signes" in data:
                            horoscope_dict = data.get("signes", {})
                        else:
                            horoscope_dict = data
                        signe_data = next((v for k, v in horoscope_dict.items() if k.lower() == signe_detecte), None)
                        if signe_data is None:
                            message_bot += f"üîç Horoscope indisponible pour **{signe_detecte.capitalize()}**. Essayez plus tard.\n\n"
                        else:
                            if isinstance(signe_data, dict):
                                horoscope = signe_data.get("horoscope")
                            else:
                                horoscope = signe_data
                            if horoscope:
                                message_bot += f"üîÆ Horoscope pour **{signe_detecte.capitalize()}** :\n\n> {horoscope}\n\n"
                            else:
                                message_bot += f"üîç Horoscope indisponible pour **{signe_detecte.capitalize()}**. Essayez plus tard.\n\n"
                        horoscope_repondu = True
                    else:
                        message_bot += "‚ùå Impossible d'obtenir l'horoscope pour le moment.\n\n"
                        horoscope_repondu = True
                except Exception as e:
                    message_bot += "‚ö†Ô∏è Une erreur est survenue lors de la r√©cup√©ration de l'horoscope.\n\n"
                    horoscope_repondu = True

        # --- Analyse compl√®te / technique ---
        if not horoscope_repondu and any(phrase in question_clean for phrase in ["analyse compl√®te", "analyse des march√©s", "analyse technique", "pr√©vision boursi√®re"]):
            try:
                resultats = []
                fichiers = glob.glob("data/donnees_*.csv")
                for fichier in fichiers:
                    df = pd.read_csv(fichier)
                    df.columns = [col.capitalize() for col in df.columns]
                    df = ajouter_indicateurs_techniques(df)  # ‚Üê Important !
                    analyse, suggestion = analyser_signaux_techniques(df)
                    try:
                        analyse, suggestion = analyser_signaux_techniques(df)
                        nom = fichier.split("donnees_")[1].replace(".csv", "").upper()
                        resume = f"\nüìå **{nom}**\n{analyse}\nüìÅ {suggestion}"
                        resultats.append(resume)
                    except:
                        continue
                if resultats:
                    message_bot += "üìä **Analyse compl√®te du march√© :**\n" + "\n\n".join(resultats) + "\n\n"
                    analyse_complete = True
            except Exception as e:
                message_bot += f"‚ùå Erreur lors de l'analyse compl√®te : {e}\n\n"

        # --- Bloc m√©t√©o am√©lior√© ---
        if not horoscope_repondu and ("m√©t√©o" in question_clean or "quel temps" in question_clean):
            villes_connues = [
                "paris", "lyon", "marseille", "lille", "bordeaux", "nantes", "strasbourg", "toulouse", "rennes",
                "nice", "angers", "dijon", "montpellier", "bayonne", "nancy", "reims", "clermont-ferrand", "besan√ßon",
                "le havre", "rouen", "poitiers", "metz", "caen", "avignon", "tours", "amiens", "perpignan"
            ]
            ville_detectee = "paris"
            mots_question = question_clean.split()
            ville_proche = difflib.get_close_matches(" ".join(mots_question), villes_connues, n=1, cutoff=0.6)
            if not ville_proche:
                for mot in mots_question:
                    ville_proche = difflib.get_close_matches(mot, villes_connues, n=1, cutoff=0.8)
                    if ville_proche:
                        break
            if ville_proche:
                ville_detectee = ville_proche[0]
            ville_detectee_cap = ville_detectee.capitalize()
            meteo = get_meteo_ville(ville_detectee_cap)
            if "erreur" in meteo.lower():
                message_bot += f"‚ö†Ô∏è Je n'ai pas trouv√© de m√©t√©o pour **{ville_detectee_cap}**. Essayez une autre ville."
            else:
                message_bot += f"üå¶Ô∏è **M√©t√©o √† {ville_detectee_cap}** :\n{meteo}\n\n"
            meteo_repondu = True

        # --- Actualit√©s am√©lior√©es ---
        if not horoscope_repondu and ("actualit√©" in question_clean or "news" in question_clean):
            actus = get_general_news()
            if isinstance(actus, str):
                message_bot += actus
            elif actus and isinstance(actus, list):
                message_bot += "üì∞ **Derni√®res actualit√©s importantes :**\n\n"
                for i, (titre, lien) in enumerate(actus[:5], 1):
                    message_bot += f"{i}. üîπ [{titre}]({lien})\n"
                message_bot += "\nüß† *Restez curieux, le savoir, c‚Äôest la puissance !*"
            else:
                message_bot += "‚ö†Ô∏è Je n‚Äôai pas pu r√©cup√©rer les actualit√©s pour le moment.\n\n"
            actus_repondu = True

        # --- Blagues ---
        elif not horoscope_repondu and any(phrase in question_clean for phrase in ["blague", "blagues"]):
            blagues = [
                "Pourquoi les traders n'ont jamais froid ? Parce qu‚Äôils ont toujours des bougies japonaises ! üòÇ",
                "Quel est le comble pour une IA ? Tomber en panne pendant une mise √† jour üòÖ",
                "Pourquoi le Bitcoin fait du yoga ? Pour rester stable... mais c'est pas gagn√© ! üßò‚Äç‚ôÇÔ∏è"
            ]
            message_bot = random.choice(blagues)
            blague_repondu = True

        # --- Bloc Bonus: Analyse des phrases floues li√©es √† des sympt√¥mes courants ---
        if not message_bot and any(phrase in question_clean for phrase in [
            "mal √† la t√™te", "maux de t√™te", "j'ai de la fi√®vre", "fi√®vre", "mal √† la gorge",
            "mal au ventre", "toux", "je tousse", "je suis enrhum√©", "nez bouch√©", "j'ai chaud", "je transpire", "j'ai froid"
        ]):
            if "t√™te" in question_clean:
                message_bot = "üß† Vous avez mal √† la t√™te ? Cela peut √™tre une migraine, une fatigue ou une tension. Essayez de vous reposer et hydratez-vous bien."
            elif "fi√®vre" in question_clean or "j'ai chaud" in question_clean:
                message_bot = "üå°Ô∏è La fi√®vre est un signal du corps contre une infection. Restez hydrat√©, reposez-vous et surveillez votre temp√©rature."
            elif "gorge" in question_clean:
                message_bot = "üëÑ Un mal de gorge peut venir d‚Äôun rhume ou d‚Äôune angine. Buvez chaud, √©vitez de forcer sur la voix."
            elif "ventre" in question_clean:
                message_bot = "üçΩÔ∏è Maux de ventre ? Peut-√™tre digestif. All√©gez votre repas, buvez de l‚Äôeau ti√®de, et reposez-vous."
            elif "toux" in question_clean or "je tousse" in question_clean:
                message_bot = "üò∑ Une toux persistante m√©rite repos et hydratation. Si elle dure plus de 3 jours, pensez √† consulter."
            elif "nez" in question_clean:
                message_bot = "ü§ß Nez bouch√© ? Un bon lavage au s√©rum physiologique et une boisson chaude peuvent aider √† d√©gager les voies nasales."
            elif "transpire" in question_clean or "j'ai froid" in question_clean:
                message_bot = "ü•∂ Des frissons ? Cela peut √™tre li√© √† une pouss√©e de fi√®vre. Couvrez-vous l√©g√®rement, reposez-vous."

        # --- Bloc Rem√®des naturels ---
        if not message_bot and any(phrase in question_clean for phrase in [
            "rem√®de", "solution naturelle", "astuce maison", "traitement doux", "soulager naturellement", "tisane", "huile essentielle"
        ]):
            if "stress" in question_clean:
                message_bot = "üßò Pour soulager le stress naturellement, pensez aux tisanes de camomille, √† la respiration profonde ou √† quelques minutes de m√©ditation."
            elif "mal de gorge" in question_clean or "gorge" in question_clean:
                message_bot = "üçØ Un mal de gorge ? Une cuill√®re de miel dans une infusion au citron ou au thym peut faire des merveilles."
            elif "rhume" in question_clean or "nez bouch√©" in question_clean:
                message_bot = "üåø Pour le nez bouch√©, essayez l'inhalation de vapeur avec quelques gouttes d‚Äôhuile essentielle d‚Äôeucalyptus ou de menthe poivr√©e."
            elif "fi√®vre" in question_clean:
                message_bot = "üßä En cas de fi√®vre, buvez beaucoup, reposez-vous et utilisez un linge frais sur le front. L‚Äôinfusion de saule blanc est √©galement un rem√®de traditionnel."
            else:
                message_bot = "üå± Il existe de nombreux rem√®des naturels. Pr√©cisez votre souci (ex : toux, stress, rhume...) et je vous proposerai une solution douce."

        # --- Bloc R√©ponses m√©dicales explicites ---
        elif not message_bot and any(mot in question_clean for mot in ["grippe", "rhume", "fi√®vre", "migraine", "angine", "hypertension", "stress", "toux", "maux", "douleur", "asthme", "bronchite", "ecz√©ma", "diab√®te", "cholest√©rol", "acn√©", "ulc√®re"]):
            reponses_medic = {
                "grippe": "ü§í Les sympt√¥mes de la grippe incluent : fi√®vre √©lev√©e, frissons, fatigue intense, toux s√®che, douleurs musculaires.",
                "rhume": "ü§ß Le rhume provoque g√©n√©ralement une congestion nasale, des √©ternuements, une l√©g√®re fatigue et parfois un peu de fi√®vre.",
                "fi√®vre": "üå°Ô∏è Pour faire baisser une fi√®vre, restez hydrat√©, reposez-vous, et prenez du parac√©tamol si besoin. Consultez si elle d√©passe 39¬∞C.",
                "migraine": "üß† Une migraine est une douleur pulsatile souvent localis√©e d‚Äôun c√¥t√© de la t√™te, pouvant s'accompagner de naus√©es et d'une sensibilit√© √† la lumi√®re.",
                "angine": "üëÑ L‚Äôangine provoque des maux de gorge intenses, parfois de la fi√®vre. Elle peut √™tre virale ou bact√©rienne.",
                "hypertension": "‚ù§Ô∏è L‚Äôhypertension est une pression sanguine trop √©lev√©e n√©cessitant un suivi m√©dical et une hygi√®ne de vie adapt√©e.",
                "stress": "üßò Le stress peut se soulager par des techniques de relaxation ou une activit√© physique mod√©r√©e.",
                "toux": "üò∑ Une toux s√®che peut √™tre le signe d'une irritation, tandis qu'une toux grasse aide √† √©vacuer les s√©cr√©tions. Hydratez-vous bien.",
                "maux": "ü§ï Pr√©cisez : maux de t√™te, de ventre, de dos ? Je peux vous donner des infos adapt√©es.",
                "douleur": "üí¢ Pour mieux vous aider, pr√©cisez la localisation ou l'intensit√© de la douleur.",
                "asthme": "ü´Å L‚Äôasthme se caract√©rise par une inflammation des voies respiratoires et des difficult√©s √† respirer, souvent soulag√©es par un inhalateur.",
                "bronchite": "ü´Å La bronchite est une inflammation des bronches, souvent accompagn√©e d'une toux persistante et parfois de fi√®vre. Reposez-vous et hydratez-vous.",
                "ecz√©ma": "ü©π L‚Äôecz√©ma est une inflammation de la peau provoquant d√©mangeaisons et rougeurs. Hydratez r√©guli√®rement et utilisez des cr√®mes apaisantes.",
                "diab√®te": "ü©∏ Le diab√®te affecte la r√©gulation du sucre dans le sang. Un suivi m√©dical, une alimentation √©quilibr√©e et une activit√© physique r√©guli√®re sont essentiels.",
                "cholest√©rol": "ü•ö Un taux √©lev√© de cholest√©rol peut √™tre r√©duit par une alimentation saine et de l'exercice. Consultez votre m√©decin pour un suivi personnalis√©.",
                "acn√©": "üí¢ L'acn√© est souvent trait√©e par une bonne hygi√®ne de la peau et, dans certains cas, des traitements sp√©cifiques. Consultez un dermatologue si n√©cessaire.",
                "ulc√®re": "ü©ª Les ulc√®res n√©cessitent un suivi m√©dical attentif, une modification de l'alimentation et parfois des traitements m√©dicamenteux sp√©cifiques."
            }
            for cle, rep in reponses_medic.items():
                if cle in question_clean:
                    message_bot = rep
                    break

        # --- Bloc R√©ponses g√©ographiques enrichi (restaur√© avec l'ancien bloc + pays en plus) ---
        elif any(kw in question_clean for kw in ["capitale", "capitale de", "capitale du", "capitale d", "capitale des", "o√π se trouve", "ville principale", "ville de"]):
            pays_detecte = None
            match = re.search(r"(?:de la|de l'|du|de|des)\s+([a-z√†√¢√ß√©√®√™√´√Æ√Ø√¥√ª√π√º√ø√±√¶≈ì' -]+)", question_clean)
            if match:
                pays_detecte = match.group(1).strip().lower()
            else:
                tokens = question_clean.split()
                if len(tokens) >= 2:
                    pays_detecte = tokens[-1].strip(" ?!.,;").lower()
            capitales = {
                "france"           : "Paris",
                "espagne"          : "Madrid",
                "italie"           : "Rome",
                "allemagne"        : "Berlin",
                "japon"            : "Tokyo",
                "japonaise"        : "Tokyo",
                "chine"            : "P√©kin",
                "br√©sil"           : "Brasilia",
                "mexique"          : "Mexico",
                "canada"           : "Ottawa",
                "√©tats-unis"       : "Washington",
                "usa"              : "Washington",
                "united states"    : "Washington",
                "inde"             : "New Delhi",
                "portugal"         : "Lisbonne",
                "royaume-uni"      : "Londres",
                "angleterre"       : "Londres",
                "argentine"        : "Buenos Aires",
                "maroc"            : "Rabat",
                "alg√©rie"          : "Alger",
                "tunisie"          : "Tunis",
                "turquie"          : "Ankara",
                "russie"           : "Moscou",
                "russe"            : "Moscou",
                "australie"        : "Canberra",
                "cor√©e du sud"     : "S√©oul",
                "cor√©e"            : "S√©oul",
                "cor√©e du nord"    : "Pyongyang",
                "vietnam"          : "Hano√Ø",
                "thailande"        : "Bangkok",
                "indon√©sie"        : "Jakarta",
                "malaisie"         : "Kuala Lumpur",
                "singapour"        : "Singapour",
                "philippines"      : "Manille",
                "pakistan"         : "Islamabad"
            }
            if pays_detecte and pays_detecte in capitales:
                message_bot = f"üìå La capitale de {pays_detecte.capitalize()} est {capitales[pays_detecte]}."
            else:
                message_bot = "üåç Je ne connais pas encore la capitale de ce pays. Essayez un autre !"

        # --- Bloc R√©ponses personnalis√©es enrichies ---
        if not message_bot:
            if any(phrase in question_clean for phrase in ["√ßa va", "tu vas bien", "comment tu vas"]):
                message_bot = "‚ú® Toujours op√©rationnelle et pr√™te √† analyser les march√©s ! Et vous, tout roule ?"
            elif "tu fais quoi" in question_clean:
                message_bot = "ü§ñ J‚Äôanalyse en silence, je pr√©vois des tendances, je veille sur les march√©s... et j‚Äôattends vos questions avec impatience !"
            elif "tu es qui" in question_clean:
                message_bot = "Je suis AVA, votre assistante IA futuriste, connect√©e aux march√©s et aux infos pour vous guider chaque jour üåêüìä"
            elif "tu dors" in question_clean or "tu es r√©veill√©e" in question_clean:
                message_bot = "üåô Dormir ? Jamais ! Je suis toujours en veille, pr√™te √† analyser, m√™me √† 3h du matin !"
            elif "dis bonjour" in question_clean:
                message_bot = "üëã Bonjour ! Ravie de vous voir connect√©(e). Une analyse ? Une blague ? Je suis dispo pour tout √ßa !"
            else:
                reponses_perso = {
                    "merci": ["Avec plaisir üòÑ", "Toujours l√† pour vous aider !", "C‚Äôest moi qui vous remercie ! üôè"],
                    "je t'aime": ["üíñ Oh... c‚Äôest r√©ciproque (en toute objectivit√© algorithmique bien s√ªr) !", "ü•∞ C‚Äôest adorable‚Ä¶ M√™me une IA peut rougir !", "‚ù§Ô∏è Je le savais d√©j√†, je suis connect√©e √† vos √©motions"],
                    "un secret": ["ü§´ Mon secret ? Je fais tourner 3 processeurs √† fond pour vous r√©pondre en douceur !", "üß† Je connais tous vos tickers pr√©f√©r√©s‚Ä¶ chut.", "üåå Je r√™ve parfois de voyager dans les donn√©es‚Ä¶"]
                }
                for cle, reponses in reponses_perso.items():
                    if cle in question_clean:
                        message_bot = random.choice(reponses)
                        perso_repondu = True
                        break

        # --- Bloc Punchlines motivationnelles ---
        if not message_bot and any(kw in question_clean for kw in ["motivation", "punchline", "booster", "remotive", "inspire-moi"]):
            punchlines = [
                "üöÄ *N‚Äôattends pas les opportunit√©s. Cr√©e-les.*",
                "üî• *Chaque bougie japonaise est une chance de rebondir.*",
                "‚ö° *La discipline bat la chance sur le long terme.*",
                "üåü *Tu ne trades pas juste des actifs, tu construis ton avenir.*",
                "üí™ *M√™me dans un march√© baissier, ta volont√© peut monter en fl√®che.*"
            ]
            message_bot = random.choice(punchlines)

        # --- Bloc Culture G√©n√©rale (questions simples) ---
        if not message_bot and any(mot in question_clean for mot in ["qui", "quand", "o√π", "combien", "quel", "quelle"]):
            base_connaissances = {
                "qui a invent√© internet": "üåê Internet a √©t√© d√©velopp√© principalement par Vinton Cerf et Robert Kahn dans les ann√©es 1970.",
                "qui est le fondateur de tesla": "‚ö° Elon Musk est l'un des cofondateurs et l'actuel PDG de Tesla.",
                "combien y a-t-il de pays dans le monde": "üåç Il y a actuellement **195 pays reconnus** dans le monde.",
                "quelle est la capitale de la france": "üìç La capitale de la France est **Paris**.",
                "quel est le plus grand oc√©an": "üåä L'oc√©an Pacifique est le plus grand au monde.",
                "quelle est la distance entre la terre et la lune": "üåï En moyenne, la distance est de **384 400 km** entre la Terre et la Lune.",
                "quel est l‚Äô√©l√©ment chimique o": "üß™ L'√©l√©ment chimique 'O' est **l'oxyg√®ne**.",
                "qui a √©crit rom√©o et juliette": "üé≠ C'est **William Shakespeare** qui a √©crit Rom√©o et Juliette.",
                "quelle est la langue la plus parl√©e au monde": "üó£Ô∏è Le **mandarin (chinois)** est la langue la plus parl√©e au monde en nombre de locuteurs natifs.",
                "combien de continents existe-t-il": "üåé Il y a **7 continents** : Afrique, Am√©rique du Nord, Am√©rique du Sud, Antarctique, Asie, Europe, Oc√©anie."
            }
            for question_cle, reponse in base_connaissances.items():
                if question_cle in question_clean:
                    message_bot = reponse
                    break

        # --- Nouveau Bloc : Analyse simple si la question commence par "analyse " ---
        if not message_bot and question_clean.startswith("analyse "):
            nom_simple = question_clean.replace("analyse", "").strip()
            nom_simple_norm = remove_accents(nom_simple)  # Normalisation sans accents
            correspondances = {
                "btc": "btc-usd", "bitcoin": "btc-usd",
                "eth": "eth-usd", "ethereum": "eth-usd",
                "aapl": "aapl", "apple": "aapl",
                "tsla": "tsla", "tesla": "tsla",
                "googl": "googl", "google": "googl",
                "msft": "msft", "microsoft": "msft",
                "amzn": "amzn", "amazon": "amzn",
                "nvda": "nvda", "nvidia": "nvda",
                "doge": "doge-usd", "dogecoin": "doge-usd",
                "ada": "ada-usd", "cardano": "ada-usd",
                "sol": "sol-usd", "solana": "sol-usd",
                "gold": "gc=F", "or": "gc=F",
                "sp500": "^gspc", "s&p": "^gspc",
                "cac": "^fchi", "cac40": "^fchi",
                "cl": "cl=F", "p√©trole": "cl=F", "petrole": "cl=F", "cl=f": "cl=F",
                "si": "si=F", "argent": "si=F",
                "xrp": "xrp-usd", "ripple": "xrp-usd",
                "bnb": "bnb-usd"
            }
            nom_ticker = correspondances.get(nom_simple_norm)
            if nom_ticker:
                data_path = f"data/donnees_{nom_ticker}.csv"
                if os.path.exists(data_path):
                    df = pd.read_csv(data_path)
                    df.columns = [col.capitalize() for col in df.columns]
                    df = ajouter_indicateurs_techniques(df)
                    analyse, suggestion = analyser_signaux_techniques(df)
                    
                    def generer_resume_signal(signaux):
                        texte = ""
                        signaux_str = " ".join(signaux).lower()
                        if "survente" in signaux_str:
                            texte += "üîª **Zone de survente d√©tect√©e.** L'actif pourrait √™tre sous-√©valu√©.\n"
                        if "surachat" in signaux_str:
                            texte += "üî∫ **Zone de surachat d√©tect√©e.** Attention √† une possible correction.\n"
                        if "haussier" in signaux_str:
                            texte += "üìà **Tendance haussi√®re d√©tect√©e.**\n"
                        if "baissier" in signaux_str:
                            texte += "üìâ **Tendance baissi√®re d√©tect√©e.**\n"
                        if "faible" in signaux_str:
                            texte += "üò¥ **Tendance faible.** Le march√© semble ind√©cis.\n"
                        return texte if texte else "‚ÑπÔ∏è Aucun signal fort d√©tect√©."
                    
                    signaux = analyse.split("\n") if analyse else []
                    resume = generer_resume_signal(signaux)
                    
                    message_bot = (
                        f"üìä **Analyse pour {nom_simple.upper()}**\n\n"
                        f"{analyse}\n\n"
                        f"üí¨ **R√©sum√© d'AVA :**\n{resume}\n\n"
                        f"ü§ñ *Intuition d'AVA :* {suggestion}"
                    )
                else:
                    message_bot = f"‚ö†Ô∏è Je ne trouve pas les donn√©es pour {nom_simple.upper()}. Lancez le script d'entra√Ænement."
            else:
                message_bot = f"ü§î Je ne connais pas encore **{nom_simple}**. R√©essayez avec un autre actif."

        # --- Bloc Calcul (simple expression math√©matique ou phrase) ---
        if not message_bot:
            question_calc = question_clean.replace(",", ".")
            # Suppression du mot-cl√© "calcul" ou "calcule" en d√©but de cha√Æne
            question_calc = re.sub(r"^calcul(?:e)?\s*", "", question_calc)
            try:
                # Si la question contient explicitement un calcul via des op√©rateurs
                if any(op in question_calc for op in ["+", "-", "*", "/", "%", "**"]):
                    try:
                        result = eval(question_calc)
                        message_bot = f"üßÆ Le r√©sultat est : **{round(result, 4)}**"
                    except Exception:
                        pass
                # Sinon, extraire l'expression apr√®s des mots-cl√©s
                if not message_bot:
                    match = re.search(r"(?:combien font|combien|calcul(?:e)?|r√©sultat de)\s*(.*)", question_calc)
                    if match:
                        expression = match.group(1).strip()
                        result = eval(expression)
                        message_bot = f"üßÆ Le r√©sultat est : **{round(result, 4)}**"
            except:
                pass
        
        # --- Bloc catch-all pour l'analyse technique ou r√©ponse par d√©faut ---
        if not message_bot:
            reponses_ava = [
                "Je suis l√† pour vous aider, mais j'aurais besoin d‚Äôun peu plus de pr√©cision ü§ñ",
                "Je n‚Äôai pas bien compris, mais je suis pr√™te √† apprendre ! Reformulez votre question üòä",
                "Ce sujet est encore flou pour moi... mais je peux vous parler d‚Äôanalyse technique, m√©t√©o, actualit√©s et bien plus !",
                "Hmm... Ce n'est pas dans ma base pour l‚Äôinstant. Essayez une autre formulation ou tapez 'analyse compl√®te' pour un bilan des march√©s üìä"
            ]
            message_bot = random.choice(reponses_ava)
        
        if not message_bot.strip():
            message_bot = "D√©sol√©, je n'ai pas trouv√© de r√©ponse √† votre question."

        # --- Bloc R√©ponses personnalis√©es pour salutations en fran√ßais ---
        salutations_fr = {"bonjour", "salut", "hello", "coucou", "√ßa va", "comment √ßa va", "comment vas-tu"}
        if any(s in question_clean for s in salutations_fr):
            # R√©ponse fix√©e en fran√ßais
            message_bot = "Bonjour ! Je vais tr√®s bien, merci. Et vous, comment allez-vous ?"

        # --- Bloc Traduction Automatique ---
        if question_clean not in ["merci", "merci beaucoup"]:
            try:
                # Si le texte n'inclut pas les caract√®res typiques du fran√ßais, tenter de d√©tecter la langue
                if not any(char in question for char in "√©√®√†√π√ß"):
                    langue = detect(question)
                else:
                    langue = "fr"
                # Traduire uniquement si la langue d√©tect√©e est diff√©rente du fran√ßais
                if langue != "fr":
                    message_bot = traduire_texte(message_bot, langue)
            except Exception as e:
                if message_bot.strip():
                    message_bot += "\n\n‚ö†Ô∏è Traduction indisponible."

        st.markdown(message_bot)
        st.session_state.messages.append({"role": "assistant", "content": message_bot})

        st.sidebar.button("ü™õ Effacer les messages", on_click=lambda: st.session_state.__setitem__("messages", []))